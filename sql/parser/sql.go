// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:294
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIGSERIAL = 57375
const BIT = 57376
const BLOB = 57377
const BOOL = 57378
const BOOLEAN = 57379
const BOTH = 57380
const BY = 57381
const BYTEA = 57382
const BYTES = 57383
const CASCADE = 57384
const CASE = 57385
const CAST = 57386
const CHAR = 57387
const CHARACTER = 57388
const CHARACTERISTICS = 57389
const CHECK = 57390
const COALESCE = 57391
const COLLATE = 57392
const COLLATION = 57393
const COLUMN = 57394
const COLUMNS = 57395
const COMMIT = 57396
const COMMITTED = 57397
const CONCAT = 57398
const CONFLICT = 57399
const CONSTRAINT = 57400
const CONSTRAINTS = 57401
const COVERING = 57402
const CREATE = 57403
const CROSS = 57404
const CUBE = 57405
const CURRENT = 57406
const CURRENT_CATALOG = 57407
const CURRENT_DATE = 57408
const CURRENT_ROLE = 57409
const CURRENT_TIME = 57410
const CURRENT_TIMESTAMP = 57411
const CURRENT_USER = 57412
const CYCLE = 57413
const DATA = 57414
const DATABASE = 57415
const DATABASES = 57416
const DATE = 57417
const DAY = 57418
const DEC = 57419
const DECIMAL = 57420
const DEFAULT = 57421
const DEALLOCATE = 57422
const DEFERRABLE = 57423
const DELETE = 57424
const DESC = 57425
const DISTINCT = 57426
const DO = 57427
const DOUBLE = 57428
const DROP = 57429
const ELSE = 57430
const ENCODING = 57431
const END = 57432
const ESCAPE = 57433
const EXCEPT = 57434
const EXISTS = 57435
const EXECUTE = 57436
const EXPLAIN = 57437
const EXTRACT = 57438
const FALSE = 57439
const FAMILY = 57440
const FETCH = 57441
const FILTER = 57442
const FIRST = 57443
const FLOAT = 57444
const FLOORDIV = 57445
const FOLLOWING = 57446
const FOR = 57447
const FORCE_INDEX = 57448
const FOREIGN = 57449
const FROM = 57450
const FULL = 57451
const GEOGRAPHY = 57452
const GRANT = 57453
const GRANTS = 57454
const GREATEST = 57455
const GROUP = 57456
const GROUPING = 57457
const HAVING = 57458
const HIGH = 57459
const HOUR = 57460
const IF = 57461
const IFNULL = 57462
const ILIKE = 57463
const IN = 57464
const INTERLEAVE = 57465
const INDEX = 57466
const INDEXES = 57467
const INITIALLY = 57468
const INNER = 57469
const INSERT = 57470
const INT = 57471
const INT64 = 57472
const INTEGER = 57473
const INTERSECT = 57474
const INTERVAL = 57475
const INTO = 57476
const IS = 57477
const ISOLATION = 57478
const JOIN = 57479
const KEY = 57480
const KEYS = 57481
const LATERAL = 57482
const LEADING = 57483
const LEAST = 57484
const LEFT = 57485
const LEVEL = 57486
const LIKE = 57487
const LIMIT = 57488
const LOCAL = 57489
const LOCALTIME = 57490
const LOCALTIMESTAMP = 57491
const LOW = 57492
const LSHIFT = 57493
const MATCH = 57494
const MINUTE = 57495
const MONTH = 57496
const NAME = 57497
const NAMES = 57498
const NATURAL = 57499
const NEXT = 57500
const NO = 57501
const NO_INDEX_JOIN = 57502
const NORMAL = 57503
const NOT = 57504
const NOTHING = 57505
const NULL = 57506
const NULLIF = 57507
const NULLS = 57508
const NUMERIC = 57509
const OF = 57510
const OFF = 57511
const OFFSET = 57512
const ON = 57513
const ONLY = 57514
const OR = 57515
const ORDER = 57516
const ORDINALITY = 57517
const OUT = 57518
const OUTER = 57519
const OVER = 57520
const OVERLAPS = 57521
const OVERLAY = 57522
const PARENT = 57523
const PARTIAL = 57524
const PARTITION = 57525
const PLACING = 57526
const POSITION = 57527
const PRECEDING = 57528
const PRECISION = 57529
const PREPARE = 57530
const PRIMARY = 57531
const PRIORITY = 57532
const RANGE = 57533
const READ = 57534
const REAL = 57535
const RECURSIVE = 57536
const REF = 57537
const REFERENCES = 57538
const RENAME = 57539
const REPEATABLE = 57540
const RELEASE = 57541
const RESTRICT = 57542
const RETURNING = 57543
const REVOKE = 57544
const RIGHT = 57545
const ROLLBACK = 57546
const ROLLUP = 57547
const ROW = 57548
const ROWS = 57549
const RSHIFT = 57550
const SAVEPOINT = 57551
const SEARCH = 57552
const SECOND = 57553
const SELECT = 57554
const SERIAL = 57555
const SERIALIZABLE = 57556
const SESSION = 57557
const SESSION_USER = 57558
const SET = 57559
const SHOW = 57560
const SIMILAR = 57561
const SIMPLE = 57562
const SMALLINT = 57563
const SMALLSERIAL = 57564
const SNAPSHOT = 57565
const SOME = 57566
const SQL = 57567
const START = 57568
const STRICT = 57569
const STRING = 57570
const STORING = 57571
const SUBSTRING = 57572
const SYMMETRIC = 57573
const SYSTEM = 57574
const TABLE = 57575
const TABLES = 57576
const TEXT = 57577
const THEN = 57578
const TIME = 57579
const TIMESTAMP = 57580
const TIMESTAMPTZ = 57581
const TO = 57582
const TRAILING = 57583
const TRANSACTION = 57584
const TREAT = 57585
const TRIM = 57586
const TRUE = 57587
const TRUNCATE = 57588
const TYPE = 57589
const UNBOUNDED = 57590
const UNCOMMITTED = 57591
const UNION = 57592
const UNIQUE = 57593
const UNKNOWN = 57594
const UPDATE = 57595
const UPSERT = 57596
const USER = 57597
const USING = 57598
const VALID = 57599
const VALIDATE = 57600
const VALUE = 57601
const VALUES = 57602
const VARCHAR = 57603
const VARIADIC = 57604
const VARYING = 57605
const WHEN = 57606
const WHERE = 57607
const WINDOW = 57608
const WITH = 57609
const WITHIN = 57610
const WITHOUT = 57611
const YEAR = 57612
const ZONE = 57613
const NOT_LA = 57614
const WITH_LA = 57615
const AS_LA = 57616
const POSTFIXOP = 57617
const UMINUS = 57618

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GEOGRAPHY",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4646

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	295, 24,
	-2, 353,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 328,
	171, 328,
	201, 328,
	293, 328,
	295, 328,
	-2, 338,
	-1, 51,
	1, 331,
	171, 331,
	201, 331,
	293, 331,
	295, 331,
	-2, 337,
	-1, 60,
	1, 24,
	295, 24,
	-2, 353,
	-1, 272,
	1, 161,
	295, 161,
	-2, 844,
	-1, 305,
	146, 363,
	170, 363,
	-2, 334,
	-1, 308,
	146, 362,
	170, 362,
	-2, 332,
	-1, 431,
	146, 362,
	170, 362,
	-2, 335,
	-1, 487,
	292, 784,
	-2, 777,
	-1, 488,
	292, 785,
	-2, 778,
	-1, 494,
	5, 498,
	292, 498,
	-2, 932,
	-1, 517,
	5, 464,
	-2, 907,
	-1, 518,
	5, 492,
	292, 492,
	-2, 909,
	-1, 519,
	5, 472,
	-2, 910,
	-1, 520,
	5, 471,
	-2, 911,
	-1, 521,
	5, 492,
	292, 492,
	-2, 914,
	-1, 522,
	5, 492,
	292, 492,
	-2, 915,
	-1, 523,
	5, 493,
	-2, 918,
	-1, 524,
	5, 459,
	-2, 919,
	-1, 525,
	5, 459,
	-2, 920,
	-1, 526,
	5, 474,
	-2, 923,
	-1, 527,
	5, 460,
	-2, 929,
	-1, 528,
	5, 461,
	-2, 930,
	-1, 529,
	5, 462,
	-2, 931,
	-1, 530,
	5, 459,
	-2, 935,
	-1, 531,
	5, 465,
	-2, 940,
	-1, 532,
	5, 463,
	-2, 943,
	-1, 533,
	5, 490,
	292, 490,
	-2, 945,
	-1, 534,
	5, 494,
	-2, 948,
	-1, 535,
	5, 496,
	-2, 949,
	-1, 536,
	5, 489,
	292, 489,
	-2, 953,
	-1, 851,
	92, 338,
	132, 338,
	146, 338,
	170, 338,
	174, 338,
	250, 338,
	-2, 604,
	-1, 859,
	292, 762,
	-2, 751,
	-1, 1049,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 532,
	-1, 1050,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 533,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 534,
	-1, 1055,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 538,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 539,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 540,
	-1, 1060,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 545,
	-1, 1066,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 547,
	-1, 1092,
	179, 675,
	-2, 678,
	-1, 1252,
	92, 338,
	132, 338,
	146, 338,
	170, 338,
	174, 338,
	250, 338,
	-2, 411,
	-1, 1256,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 546,
	-1, 1257,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 548,
	-1, 1262,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 549,
	-1, 1280,
	179, 674,
	-2, 677,
	-1, 1436,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 550,
	-1, 1441,
	135, 0,
	-2, 560,
	-1, 1449,
	179, 676,
	-2, 679,
	-1, 1482,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 585,
	-1, 1483,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 586,
	-1, 1484,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 587,
	-1, 1488,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 591,
	-1, 1489,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 592,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 593,
	-1, 1595,
	135, 0,
	-2, 561,
	-1, 1598,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 564,
	-1, 1599,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 566,
	-1, 1684,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 565,
	-1, 1685,
	31, 0,
	121, 0,
	122, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 567,
	-1, 1692,
	135, 0,
	-2, 594,
	-1, 1736,
	135, 0,
	-2, 595,
	-1, 1789,
	31, 0,
	121, 0,
	145, 0,
	219, 0,
	272, 0,
	-2, 906,
}

const sqlNprod = 1047
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22904

var sqlAct = [...]int{

	488, 578, 1811, 933, 1405, 1788, 1767, 1741, 1769, 1636,
	1768, 1787, 941, 1460, 1022, 1672, 309, 1558, 1659, 591,
	1587, 1559, 807, 461, 549, 480, 273, 486, 485, 1520,
	1249, 1579, 84, 84, 84, 1568, 85, 84, 478, 681,
	84, 854, 1003, 331, 1573, 1416, 856, 1248, 84, 450,
	1283, 1239, 1005, 1184, 37, 84, 84, 17, 592, 84,
	1425, 1335, 84, 84, 84, 788, 785, 558, 84, 84,
	84, 84, 1334, 357, 555, 918, 942, 909, 1138, 1235,
	1102, 1078, 328, 1006, 956, 328, 1075, 339, 73, 537,
	972, 328, 1034, 339, 803, 965, 655, 352, 316, 50,
	639, 23, 1032, 308, 13, 1190, 6, 419, 314, 358,
	998, 809, 560, 460, 420, 550, 551, 666, 451, 354,
	636, 890, 8, 7, 5, 4, 71, 314, 350, 50,
	1031, 434, 78, 347, 886, 77, 1009, 79, 635, 349,
	319, 935, 657, 433, 435, 653, 251, 270, 1141, 571,
	343, 260, 438, 80, 75, 74, 76, 51, 317, 50,
	1679, 327, 359, 1680, 334, 81, 52, 580, 539, 1818,
	344, 934, 1026, 975, 580, 1803, 580, 1784, 1026, 1775,
	1658, 1766, 1026, 313, 962, 1760, 812, 313, 1026, 1738,
	355, 1732, 962, 1721, 1026, 1711, 1658, 1726, 1026, 298,
	969, 1686, 1196, 337, 962, 814, 1683, 49, 306, 1026,
	1669, 1247, 1666, 1658, 321, 1667, 1657, 305, 1641, 1658,
	1640, 1026, 1620, 1026, 1278, 975, 813, 81, 1600, 1279,
	810, 975, 828, 29, 1597, 56, 812, 962, 831, 832,
	833, 30, 970, 1531, 569, 1495, 1026, 84, 834, 1445,
	1391, 1385, 975, 1386, 1386, 814, 58, 841, 1352, 1448,
	1350, 1353, 84, 975, 1349, 84, 84, 975, 1348, 49,
	1280, 975, 1221, 975, 1661, 1277, 813, 971, 968, 819,
	975, 811, 828, 59, 1027, 984, 974, 1026, 975, 975,
	54, 961, 811, 538, 962, 29, 55, 907, 84, 1237,
	84, 1223, 84, 30, 84, 1282, 1026, 906, 493, 975,
	905, 586, 977, 1086, 587, 53, 1021, 552, 992, 84,
	445, 553, 432, 328, 446, 581, 779, 829, 426, 819,
	84, 778, 581, 647, 581, 973, 646, 383, 326, 60,
	552, 84, 84, 84, 553, 84, 553, 838, 842, 680,
	403, 1786, 583, 546, 1782, 1774, 431, 1733, 56, 1668,
	1625, 840, 1621, 1613, 328, 572, 572, 1612, 1611, 1606,
	544, 836, 548, 543, 56, 391, 84, 829, 1605, 58,
	1604, 1556, 392, 84, 830, 84, 1510, 1505, 1504, 1503,
	1451, 1434, 1415, 1395, 967, 58, 357, 357, 1357, 328,
	1549, 1354, 425, 598, 683, 84, 59, 84, 84, 84,
	84, 84, 84, 54, 84, 1342, 966, 1555, 84, 55,
	56, 584, 59, 84, 676, 418, 781, 812, 579, 84,
	782, 1333, 358, 358, 830, 1305, 1302, 1300, 53, 1083,
	684, 58, 1288, 344, 1287, 839, 814, 84, 1225, 423,
	84, 1222, 1155, 1109, 53, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 441, 442, 1777, 813, 59, 1196,
	1108, 445, 862, 444, 306, 54, 1393, 447, 588, 1462,
	810, 55, 1751, 305, 1725, 359, 359, 1703, 1701, 1694,
	1675, 570, 573, 685, 1664, 1655, 1633, 1618, 837, 1590,
	72, 825, 826, 827, 1566, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 552, 859, 545, 1440, 553, 314,
	819, 1548, 1433, 643, 812, 1084, 1412, 1411, 633, 1410,
	642, 1408, 1369, 1368, 1306, 1332, 1296, 1295, 645, 1274,
	938, 677, 670, 814, 1270, 769, 621, 1080, 84, 1306,
	1210, 1169, 766, 1168, 683, 770, 771, 772, 773, 774,
	1148, 775, 84, 1107, 813, 777, 84, 793, 829, 84,
	84, 900, 1025, 901, 780, 84, 791, 84, 84, 792,
	84, 891, 812, 84, 894, 84, 84, 805, 357, 328,
	684, 1306, 339, 903, 898, 1320, 306, 884, 945, 306,
	306, 814, 883, 339, 882, 799, 339, 541, 800, 801,
	881, 951, 352, 853, 880, 879, 1169, 819, 878, 877,
	876, 875, 813, 874, 358, 830, 873, 1311, 872, 936,
	871, 936, 870, 869, 860, 858, 53, 783, 84, 84,
	923, 925, 1311, 685, 73, 912, 332, 892, 957, 449,
	389, 379, 895, 377, 1554, 899, 888, 889, 857, 1306,
	1204, 979, 1203, 1681, 1553, 829, 1197, 1016, 928, 1585,
	397, 620, 896, 56, 867, 819, 897, 359, 1356, 1355,
	1255, 683, 414, 398, 1311, 50, 597, 1574, 78, 50,
	1321, 77, 959, 79, 58, 958, 934, 960, 915, 823,
	815, 816, 817, 818, 820, 355, 263, 954, 931, 80,
	75, 74, 76, 953, 952, 940, 950, 684, 421, 949,
	997, 59, 830, 829, 1463, 1291, 1103, 887, 54, 1747,
	1192, 1798, 1321, 561, 55, 562, 1799, 892, 1539, 895,
	1710, 297, 983, 296, 291, 292, 1649, 1322, 1648, 1217,
	1381, 1361, 1311, 937, 1761, 986, 980, 981, 978, 863,
	1392, 985, 1360, 1258, 889, 888, 1209, 1208, 1207, 84,
	685, 675, 674, 969, 668, 663, 1206, 1067, 976, 303,
	830, 930, 929, 84, 84, 422, 1152, 1151, 1038, 1322,
	417, 64, 1267, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 395, 563, 375, 1265, 328, 1307, 1308, 1309,
	1310, 1312, 84, 1028, 84, 970, 454, 300, 1316, 1313,
	1314, 1315, 1307, 1308, 1309, 1310, 1312, 561, 1306, 562,
	1709, 1729, 561, 1638, 562, 328, 911, 65, 598, 396,
	1037, 312, 1380, 1371, 683, 68, 678, 1749, 1124, 252,
	971, 968, 821, 822, 823, 815, 816, 817, 818, 820,
	1316, 1313, 1314, 1315, 1307, 1308, 1309, 1310, 1312, 574,
	257, 1036, 1263, 1114, 973, 253, 1268, 1808, 919, 901,
	684, 311, 1189, 1081, 901, 1002, 1771, 1001, 911, 580,
	1400, 1077, 1185, 1000, 910, 62, 69, 563, 1306, 254,
	627, 1103, 563, 1154, 1090, 1077, 1763, 1798, 973, 84,
	84, 84, 1185, 1180, 679, 84, 256, 1183, 84, 1019,
	1020, 1311, 1764, 313, 84, 84, 84, 84, 84, 1029,
	84, 84, 1160, 685, 1309, 1310, 1312, 922, 84, 301,
	84, 1383, 598, 1216, 1194, 1117, 63, 84, 973, 567,
	540, 566, 1199, 1264, 1200, 1064, 84, 304, 1099, 1772,
	1266, 1191, 67, 66, 1082, 1704, 1218, 967, 1397, 1321,
	1191, 386, 388, 1372, 564, 1166, 1242, 84, 84, 328,
	1158, 621, 394, 84, 885, 623, 1690, 1118, 598, 1187,
	1656, 1311, 314, 357, 1245, 393, 1179, 1773, 1164, 310,
	255, 1294, 1639, 1398, 1424, 70, 1087, 1091, 415, 1094,
	1243, 84, 559, 84, 84, 84, 850, 1426, 84, 921,
	1159, 1202, 1119, 1116, 1378, 1133, 1322, 84, 313, 358,
	1807, 1145, 1146, 1147, 84, 1770, 84, 1797, 1228, 1321,
	1227, 258, 1814, 437, 812, 1062, 1065, 581, 1678, 394,
	669, 664, 1198, 1195, 1795, 61, 1572, 1014, 1201, 328,
	406, 973, 416, 814, 1527, 384, 1521, 1306, 564, 1061,
	1244, 382, 490, 564, 1519, 1643, 908, 1224, 1213, 1226,
	1120, 920, 359, 957, 813, 621, 473, 1212, 1396, 1219,
	314, 1215, 1220, 1214, 1260, 1528, 1322, 1616, 1313, 1314,
	1315, 1307, 1308, 1309, 1310, 1312, 620, 988, 1076, 1073,
	1233, 1281, 1806, 990, 1522, 1642, 1232, 1491, 82, 244,
	245, 597, 1071, 262, 50, 1631, 274, 959, 1253, 991,
	958, 621, 960, 1824, 262, 314, 1363, 819, 989, 1115,
	436, 320, 320, 1063, 1535, 330, 1538, 1261, 330, 336,
	330, 1259, 1163, 1537, 330, 345, 330, 274, 652, 1812,
	1311, 1015, 1742, 790, 437, 784, 1254, 1588, 436, 1632,
	84, 1307, 1308, 1309, 1310, 1312, 776, 1375, 1523, 1377,
	1524, 1617, 1290, 648, 314, 829, 1171, 1069, 1170, 1068,
	1582, 650, 1367, 1074, 393, 1492, 1421, 84, 342, 1388,
	1813, 1493, 651, 1420, 341, 1526, 428, 311, 1321, 1406,
	620, 1557, 1529, 1417, 1339, 1340, 1341, 1815, 1823, 1236,
	945, 1589, 84, 1106, 84, 597, 84, 1534, 1693, 1273,
	84, 1615, 1336, 1275, 1358, 1382, 1536, 1439, 84, 1301,
	1269, 84, 830, 1365, 1387, 1285, 1286, 84, 683, 982,
	413, 84, 411, 84, 798, 410, 620, 409, 1379, 408,
	407, 328, 404, 340, 328, 1322, 1337, 1525, 868, 1179,
	1070, 597, 1390, 1389, 768, 1105, 1407, 1072, 1331, 1517,
	1376, 1374, 1362, 1229, 684, 1017, 1013, 1430, 955, 1344,
	1442, 585, 1409, 1423, 1429, 84, 598, 1414, 1399, 1401,
	1402, 1453, 1454, 1455, 1427, 1428, 582, 577, 1238, 568,
	565, 1457, 789, 1650, 1799, 672, 1023, 815, 816, 817,
	818, 820, 1652, 927, 598, 598, 1450, 439, 622, 324,
	911, 1384, 598, 380, 812, 400, 926, 685, 3, 1315,
	1307, 1308, 1309, 1310, 1312, 812, 1661, 1464, 385, 1706,
	911, 274, 274, 814, 1735, 1242, 924, 1466, 1467, 1418,
	443, 84, 84, 84, 598, 1471, 634, 1727, 1419, 84,
	84, 1422, 1024, 1245, 813, 84, 1469, 84, 248, 84,
	84, 84, 84, 1240, 262, 813, 330, 84, 274, 1243,
	429, 1532, 1533, 440, 939, 325, 1498, 1502, 806, 333,
	644, 590, 1542, 1241, 1512, 320, 964, 290, 1499, 401,
	1551, 84, 84, 1821, 259, 1822, 330, 1581, 1306, 812,
	623, 84, 84, 1446, 812, 84, 1511, 330, 330, 330,
	1571, 575, 1403, 1546, 84, 84, 1564, 1563, 814, 621,
	1564, 1563, 1552, 1550, 328, 328, 1516, 1565, 328, 1244,
	594, 1565, 293, 294, 1570, 1394, 1591, 994, 993, 813,
	1596, 1351, 330, 84, 1205, 1592, 598, 621, 621, 640,
	1153, 640, 1150, 1149, 1100, 621, 249, 995, 1785, 1602,
	1456, 1496, 1230, 996, 861, 299, 1637, 250, 767, 405,
	1608, 274, 1506, 640, 274, 274, 274, 274, 274, 1762,
	274, 1293, 1580, 1689, 274, 1671, 1104, 621, 866, 262,
	28, 1561, 819, 466, 1518, 787, 1364, 1008, 84, 252,
	84, 1007, 84, 84, 623, 686, 673, 662, 489, 412,
	84, 1614, 656, 320, 665, 1113, 808, 542, 491, 595,
	257, 492, 1646, 1647, 596, 253, 893, 479, 1629, 84,
	593, 1577, 1578, 1635, 353, 1583, 1584, 1626, 943, 1101,
	1289, 864, 465, 471, 620, 598, 470, 1576, 1088, 254,
	623, 1651, 376, 84, 462, 84, 1586, 1246, 40, 597,
	1662, 390, 268, 84, 1665, 812, 256, 269, 1188, 1547,
	1018, 84, 620, 620, 1564, 1563, 1670, 1653, 1645, 794,
	620, 1627, 1660, 1373, 814, 1565, 328, 597, 597, 621,
	1674, 302, 1303, 1682, 378, 597, 1131, 1123, 1121, 1112,
	1688, 424, 554, 944, 402, 813, 1030, 963, 448, 1567,
	802, 1776, 620, 323, 330, 322, 1004, 399, 1695, 649,
	987, 1702, 295, 1700, 598, 1705, 1370, 597, 916, 84,
	84, 1746, 330, 84, 57, 330, 932, 84, 1698, 22,
	20, 330, 84, 947, 948, 19, 330, 1714, 84, 330,
	255, 274, 274, 1723, 1716, 18, 84, 1718, 819, 1724,
	1715, 16, 683, 15, 14, 901, 1564, 1563, 1717, 452,
	452, 21, 1125, 12, 817, 818, 820, 1565, 1728, 556,
	1730, 1527, 84, 1722, 84, 84, 1734, 84, 621, 11,
	314, 258, 10, 1677, 1737, 1750, 9, 27, 684, 1752,
	598, 1731, 26, 25, 640, 808, 1744, 84, 1745, 1756,
	2, 1755, 1528, 1748, 620, 1, 0, 1754, 1753, 0,
	0, 1759, 1758, 1757, 0, 0, 0, 0, 0, 597,
	84, 0, 84, 1564, 1563, 0, 0, 0, 0, 0,
	1783, 0, 1779, 622, 1565, 0, 0, 0, 1781, 1238,
	0, 685, 0, 945, 1780, 0, 1793, 1794, 84, 0,
	1796, 0, 0, 1802, 1800, 0, 0, 621, 0, 0,
	0, 0, 0, 0, 1804, 1805, 0, 0, 0, 0,
	1801, 0, 1816, 795, 797, 1819, 0, 1817, 0, 1820,
	804, 0, 0, 1720, 0, 1523, 1242, 1524, 0, 0,
	0, 0, 845, 846, 847, 848, 849, 1825, 0, 0,
	0, 852, 0, 620, 1245, 467, 38, 0, 0, 0,
	0, 0, 1526, 0, 1240, 0, 0, 0, 597, 1529,
	1243, 865, 0, 0, 0, 999, 0, 0, 815, 816,
	817, 818, 820, 621, 1241, 0, 38, 622, 0, 330,
	916, 0, 0, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 0, 1765, 594, 307, 0, 0, 315,
	0, 0, 1125, 1125, 0, 0, 38, 0, 330, 0,
	274, 0, 0, 0, 1525, 0, 623, 623, 315, 0,
	1244, 0, 620, 622, 623, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 1271, 1272, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1125, 1125, 1125, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 1329, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 594,
	0, 0, 0, 0, 0, 330, 1161, 1162, 0, 0,
	0, 916, 0, 597, 1167, 0, 0, 0, 0, 0,
	1172, 1173, 1175, 1177, 1178, 0, 1181, 1182, 0, 0,
	0, 0, 0, 0, 330, 0, 1193, 0, 0, 0,
	0, 0, 0, 330, 0, 594, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 640, 0, 0, 0, 0, 999,
	0, 0, 0, 0, 0, 0, 1125, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 787, 0, 787,
	274, 330, 0, 0, 1231, 0, 0, 0, 1437, 1438,
	0, 0, 0, 1234, 0, 0, 0, 0, 0, 0,
	1251, 0, 330, 0, 1125, 1125, 1125, 1125, 1125, 1125,
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
	1125, 1125, 1125, 0, 1125, 0, 0, 623, 0, 0,
	0, 0, 307, 0, 0, 0, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 0, 1494, 452, 0, 0,
	0, 0, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 0, 1066, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 0, 0, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 1111,
	0, 1122, 0, 1132, 1134, 1139, 1142, 1143, 1144, 622,
	622, 0, 0, 0, 0, 0, 808, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 0, 307, 0, 0, 307, 307, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 1186, 623, 0, 855, 0, 0, 0, 1404, 0,
	916, 0, 787, 0, 0, 0, 1413, 0, 0, 812,
	0, 831, 832, 833, 330, 0, 0, 330, 0, 0,
	0, 834, 0, 1251, 0, 0, 0, 1432, 814, 1251,
	841, 0, 1211, 594, 0, 1125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	0, 594, 594, 0, 0, 0, 0, 1634, 0, 594,
	0, 1461, 0, 0, 0, 0, 0, 0, 804, 0,
	0, 622, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 38,
	0, 594, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 38, 0, 1256, 1257,
	838, 842, 1125, 0, 1262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 840, 0, 0, 1514, 1515, 916,
	0, 0, 0, 1276, 836, 808, 808, 0, 0, 0,
	829, 1540, 1284, 1541, 1692, 330, 1543, 1544, 1545, 0,
	1292, 0, 0, 330, 1297, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 1560, 852, 1569, 916, 1560,
	0, 0, 1139, 1139, 1139, 0, 0, 330, 330, 0,
	1125, 330, 0, 594, 0, 0, 0, 830, 0, 0,
	808, 1251, 0, 0, 1359, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 1366, 0, 0, 0, 0,
	0, 0, 1736, 0, 0, 0, 0, 0, 0, 1609,
	0, 0, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 452, 0, 0, 556, 0, 0, 0, 0, 622,
	0, 0, 0, 0, 1306, 0, 1323, 1324, 1325, 0,
	0, 837, 0, 0, 825, 826, 827, 0, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 0, 0, 0,
	0, 0, 0, 0, 916, 1622, 1628, 0, 274, 1630,
	0, 0, 594, 0, 0, 0, 330, 0, 0, 0,
	1320, 0, 1435, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 808, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 1033, 0, 1211,
	0, 0, 0, 1560, 0, 0, 0, 0, 1458, 330,
	0, 1673, 0, 0, 0, 0, 0, 1311, 1468, 330,
	0, 1470, 0, 0, 0, 0, 0, 808, 1079, 0,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 1500, 1501, 0, 0, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1707, 1708, 0, 0, 1712,
	0, 0, 0, 1713, 0, 1560, 0, 0, 274, 0,
	452, 0, 0, 0, 1569, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 1322, 315, 0, 0, 0, 812, 0, 831,
	832, 833, 0, 0, 1575, 0, 0, 0, 1743, 834,
	808, 330, 0, 274, 0, 0, 814, 0, 841, 0,
	0, 0, 0, 0, 0, 0, 1595, 0, 0, 0,
	1598, 1599, 1560, 1673, 0, 1601, 0, 813, 0, 1603,
	0, 0, 0, 828, 0, 0, 1607, 0, 0, 0,
	1610, 0, 0, 0, 0, 0, 330, 0, 808, 1317,
	1318, 1319, 0, 1316, 1313, 1314, 1315, 1307, 1308, 1309,
	1310, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 1619, 0, 808, 0, 0, 0, 0, 0,
	819, 1252, 0, 812, 0, 831, 832, 833, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 838, 842,
	0, 0, 814, 0, 841, 0, 0, 0, 0, 0,
	0, 1079, 840, 0, 1644, 0, 0, 0, 0, 0,
	0, 0, 836, 813, 0, 0, 851, 0, 829, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 0, 0, 0, 1676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1684, 1685, 0, 0, 0, 851, 819, 0, 0, 812,
	0, 831, 832, 833, 0, 830, 0, 0, 0, 0,
	0, 834, 0, 0, 838, 842, 839, 0, 814, 1697,
	841, 0, 0, 0, 0, 0, 0, 0, 840, 0,
	1699, 0, 0, 0, 0, 0, 0, 0, 836, 813,
	0, 0, 0, 0, 829, 828, 0, 0, 0, 0,
	0, 0, 556, 0, 0, 0, 0, 0, 1306, 0,
	1323, 1324, 1325, 0, 0, 0, 835, 0, 0, 837,
	1594, 0, 825, 826, 827, 0, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 0, 0, 1156, 0,
	0, 0, 819, 0, 0, 812, 0, 1157, 0, 0,
	0, 830, 0, 1033, 1320, 0, 1033, 0, 0, 0,
	838, 842, 839, 0, 814, 0, 841, 812, 0, 831,
	832, 833, 0, 0, 840, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 836, 813, 814, 0, 841, 0,
	829, 828, 0, 0, 1778, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 813, 0, 0,
	1792, 1792, 835, 828, 0, 837, 0, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 0, 0, 1326, 0, 0, 1792, 0, 819, 1347,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 1321,
	0, 812, 0, 831, 832, 833, 838, 842, 839, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 1792, 0,
	814, 0, 841, 0, 0, 0, 0, 0, 838, 842,
	836, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 813, 840, 0, 0, 0, 0, 828, 0, 0,
	0, 38, 836, 0, 0, 0, 1322, 0, 829, 0,
	0, 837, 0, 0, 825, 826, 827, 0, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 0, 0, 0,
	835, 0, 0, 0, 0, 1346, 1033, 1033, 0, 0,
	1033, 0, 0, 830, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 838, 842, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 1317, 1318, 1319, 839, 1316, 1313, 1314,
	1315, 1307, 1308, 1309, 1310, 1312, 836, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 825, 826, 827, 0, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 0, 0, 0, 830,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 1654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 825, 826, 827, 682,
	824, 821, 822, 823, 815, 816, 817, 818, 820, 0,
	0, 86, 87, 687, 88, 688, 689, 690, 691, 195,
	692, 693, 694, 695, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 696, 92, 202, 203, 93, 697, 698,
	204, 205, 206, 699, 207, 700, 361, 701, 94, 95,
	96, 851, 97, 702, 98, 99, 703, 362, 100, 101,
	704, 705, 706, 707, 708, 709, 102, 103, 104, 105,
	208, 106, 209, 210, 710, 107, 711, 108, 712, 713,
	714, 109, 110, 715, 111, 716, 0, 717, 211, 112,
	113, 212, 718, 719, 720, 114, 115, 213, 0, 116,
	721, 117, 722, 723, 363, 214, 724, 118, 215, 725,
	216, 726, 119, 120, 217, 218, 365, 727, 123, 728,
	121, 729, 364, 122, 219, 220, 221, 730, 222, 731,
	366, 124, 367, 125, 126, 732, 733, 223, 368, 127,
	369, 734, 128, 735, 736, 129, 0, 130, 131, 132,
	133, 134, 370, 135, 136, 139, 137, 737, 138, 738,
	224, 140, 225, 141, 142, 739, 740, 741, 742, 743,
	143, 226, 371, 144, 372, 227, 145, 146, 147, 744,
	228, 148, 229, 149, 745, 150, 151, 152, 230, 153,
	154, 746, 156, 157, 155, 158, 747, 159, 373, 160,
	161, 231, 162, 0, 163, 164, 165, 748, 232, 166,
	167, 749, 168, 169, 374, 170, 233, 234, 171, 750,
	172, 173, 175, 235, 174, 236, 751, 176, 752, 177,
	178, 753, 237, 238, 239, 754, 755, 179, 240, 241,
	756, 180, 181, 182, 183, 757, 758, 184, 185, 186,
	759, 760, 187, 188, 189, 242, 243, 761, 190, 762,
	763, 764, 765, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 86, 87, 687, 88, 688, 689,
	690, 691, 195, 692, 693, 694, 695, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 696, 92, 202, 203,
	93, 697, 698, 204, 205, 206, 699, 207, 700, 361,
	701, 94, 95, 96, 0, 97, 702, 98, 99, 703,
	362, 100, 101, 704, 705, 706, 707, 708, 709, 102,
	103, 104, 105, 208, 106, 209, 210, 710, 107, 711,
	108, 712, 713, 714, 109, 110, 715, 111, 716, 0,
	717, 211, 112, 113, 212, 718, 719, 720, 114, 115,
	213, 0, 116, 721, 117, 722, 723, 363, 214, 724,
	118, 215, 725, 216, 726, 119, 120, 217, 218, 365,
	727, 123, 728, 121, 729, 364, 122, 219, 220, 221,
	730, 222, 731, 366, 124, 367, 125, 126, 732, 733,
	223, 368, 127, 369, 734, 128, 735, 736, 129, 0,
	130, 131, 132, 133, 134, 370, 135, 136, 139, 137,
	737, 138, 738, 224, 140, 225, 141, 142, 739, 740,
	741, 742, 743, 143, 226, 371, 144, 372, 227, 145,
	146, 147, 744, 228, 148, 229, 149, 745, 150, 151,
	152, 230, 153, 154, 746, 156, 157, 155, 158, 747,
	159, 373, 160, 161, 231, 162, 0, 163, 164, 165,
	748, 232, 166, 167, 749, 168, 169, 374, 170, 233,
	234, 171, 750, 172, 173, 175, 235, 174, 236, 751,
	176, 752, 177, 178, 753, 237, 238, 239, 754, 755,
	179, 240, 241, 756, 180, 181, 182, 183, 757, 758,
	184, 185, 186, 759, 760, 187, 188, 189, 242, 243,
	761, 190, 762, 763, 764, 765, 191, 192, 193, 194,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 86, 87, 687, 88, 688, 689,
	690, 691, 195, 692, 693, 694, 695, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 696, 92, 202, 203,
	93, 697, 698, 204, 205, 206, 699, 207, 700, 361,
	701, 94, 95, 96, 0, 97, 702, 98, 99, 703,
	362, 100, 101, 704, 705, 706, 707, 708, 709, 102,
	103, 104, 105, 208, 106, 209, 210, 710, 107, 711,
	108, 712, 713, 714, 109, 110, 715, 111, 716, 0,
	717, 211, 112, 113, 212, 718, 719, 720, 114, 115,
	213, 0, 116, 721, 117, 722, 723, 363, 214, 724,
	118, 215, 725, 216, 726, 119, 120, 217, 218, 365,
	727, 123, 728, 121, 729, 364, 122, 219, 220, 221,
	730, 222, 731, 366, 124, 367, 125, 126, 732, 733,
	223, 368, 127, 369, 734, 128, 735, 736, 129, 0,
	130, 131, 132, 133, 134, 370, 135, 136, 139, 137,
	737, 138, 738, 224, 140, 225, 141, 142, 739, 740,
	741, 742, 743, 143, 226, 371, 144, 372, 227, 145,
	146, 147, 744, 228, 148, 229, 149, 745, 150, 151,
	152, 230, 153, 154, 746, 156, 157, 155, 158, 747,
	159, 373, 160, 161, 231, 162, 0, 163, 164, 165,
	748, 232, 166, 167, 749, 168, 169, 374, 170, 233,
	234, 171, 750, 172, 173, 175, 235, 174, 236, 751,
	176, 752, 177, 178, 753, 237, 238, 239, 754, 755,
	179, 240, 241, 756, 180, 181, 182, 183, 757, 758,
	184, 185, 186, 759, 760, 187, 188, 189, 242, 243,
	761, 190, 762, 763, 764, 765, 191, 192, 193, 194,
	487, 476, 477, 474, 475, 463, 0, 0, 0, 0,
	0, 0, 86, 87, 1096, 88, 0, 0, 0, 0,
	503, 469, 0, 0, 0, 89, 90, 196, 517, 198,
	518, 91, 519, 520, 0, 92, 202, 203, 93, 484,
	502, 521, 522, 206, 0, 513, 0, 495, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 362, 100,
	101, 0, 496, 498, 0, 497, 499, 102, 103, 104,
	105, 523, 106, 524, 525, 0, 107, 0, 108, 0,
	1097, 0, 516, 110, 0, 111, 0, 0, 0, 468,
	112, 113, 504, 482, 0, 0, 114, 115, 526, 0,
	116, 0, 117, 0, 0, 363, 214, 0, 118, 514,
	0, 216, 0, 119, 120, 510, 512, 365, 0, 123,
	0, 121, 0, 364, 122, 527, 528, 529, 0, 494,
	0, 366, 124, 367, 125, 126, 0, 0, 515, 368,
	127, 369, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 370, 135, 136, 139, 137, 458, 138,
	483, 511, 140, 530, 141, 142, 0, 0, 0, 0,
	0, 143, 226, 371, 144, 372, 505, 145, 146, 147,
	0, 506, 148, 229, 149, 0, 150, 151, 152, 531,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 373,
	160, 161, 472, 162, 0, 163, 164, 165, 0, 232,
	166, 167, 500, 168, 169, 374, 170, 532, 234, 171,
	0, 172, 173, 175, 533, 174, 507, 0, 176, 0,
	177, 178, 0, 237, 534, 535, 0, 0, 179, 508,
	509, 481, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 501, 0, 187, 188, 189, 242, 536, 1095, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 459, 0,
	0, 487, 476, 477, 474, 475, 463, 0, 0, 455,
	456, 1098, 0, 86, 87, 457, 88, 0, 464, 1093,
	0, 503, 469, 0, 0, 0, 89, 90, 196, 517,
	198, 518, 91, 519, 520, 0, 92, 202, 203, 93,
	484, 502, 521, 522, 206, 0, 513, 0, 495, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 362,
	100, 101, 0, 496, 498, 0, 497, 499, 102, 103,
	104, 105, 523, 106, 524, 525, 557, 107, 0, 108,
	0, 0, 0, 516, 110, 0, 111, 0, 0, 0,
	468, 112, 113, 504, 482, 0, 0, 114, 115, 526,
	0, 116, 0, 117, 0, 0, 363, 214, 0, 118,
	514, 0, 216, 0, 119, 120, 510, 512, 365, 0,
	123, 0, 121, 0, 364, 122, 527, 528, 529, 0,
	494, 0, 366, 124, 367, 125, 126, 0, 0, 515,
	368, 127, 369, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 370, 135, 136, 139, 137, 458,
	138, 483, 511, 140, 530, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 371, 144, 372, 505, 145, 146,
	147, 0, 506, 148, 229, 149, 0, 150, 151, 152,
	531, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	373, 160, 161, 472, 162, 0, 163, 164, 165, 56,
	232, 166, 167, 500, 168, 169, 374, 170, 532, 234,
	171, 0, 172, 173, 175, 533, 174, 507, 0, 176,
	58, 177, 178, 0, 237, 534, 535, 0, 0, 179,
	508, 509, 481, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 501, 0, 187, 188, 189, 360, 536, 0,
	190, 0, 0, 0, 54, 191, 192, 193, 194, 459,
	55, 0, 487, 476, 477, 474, 475, 463, 0, 0,
	455, 456, 0, 0, 86, 87, 457, 88, 0, 464,
	0, 0, 503, 469, 0, 0, 0, 89, 90, 196,
	517, 198, 518, 91, 519, 520, 0, 92, 202, 203,
	93, 484, 502, 521, 522, 206, 0, 513, 0, 495,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	362, 100, 101, 0, 496, 498, 0, 497, 499, 102,
	103, 104, 105, 523, 106, 524, 525, 0, 107, 0,
	108, 0, 0, 0, 516, 110, 0, 111, 0, 0,
	0, 468, 112, 113, 504, 482, 0, 0, 114, 115,
	526, 0, 116, 0, 117, 0, 0, 363, 214, 0,
	118, 514, 0, 216, 0, 119, 120, 510, 512, 365,
	0, 123, 0, 121, 0, 364, 122, 527, 528, 529,
	0, 494, 0, 366, 124, 367, 125, 126, 0, 0,
	515, 368, 127, 369, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 370, 135, 136, 139, 137,
	458, 138, 483, 511, 140, 530, 141, 142, 0, 0,
	0, 0, 0, 143, 226, 371, 144, 372, 505, 145,
	146, 147, 0, 506, 148, 229, 149, 0, 150, 151,
	152, 531, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 373, 160, 161, 472, 162, 0, 163, 164, 165,
	56, 232, 166, 167, 500, 168, 169, 374, 170, 532,
	234, 171, 0, 172, 173, 175, 533, 174, 507, 0,
	176, 58, 177, 178, 0, 237, 534, 535, 0, 0,
	179, 508, 509, 481, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 501, 0, 187, 188, 189, 360, 536,
	0, 190, 0, 0, 0, 54, 191, 192, 193, 194,
	459, 55, 0, 487, 476, 477, 474, 475, 463, 0,
	0, 455, 456, 0, 0, 86, 87, 457, 88, 0,
	464, 0, 0, 503, 469, 0, 0, 0, 89, 90,
	196, 517, 198, 518, 91, 519, 520, 1135, 92, 202,
	203, 93, 484, 502, 521, 522, 206, 0, 513, 0,
	495, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 362, 100, 101, 0, 496, 498, 0, 497, 499,
	102, 103, 104, 105, 523, 106, 524, 525, 0, 107,
	0, 108, 0, 0, 0, 516, 110, 0, 111, 0,
	0, 0, 468, 112, 113, 504, 482, 0, 0, 114,
	115, 526, 0, 116, 0, 117, 0, 1140, 363, 214,
	0, 118, 514, 0, 216, 0, 119, 120, 510, 512,
	365, 0, 123, 0, 121, 0, 364, 122, 527, 528,
	529, 0, 494, 0, 366, 124, 367, 125, 126, 0,
	1136, 515, 368, 127, 369, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 370, 135, 136, 139,
	137, 458, 138, 483, 511, 140, 530, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 371, 144, 372, 505,
	145, 146, 147, 0, 506, 148, 229, 149, 0, 150,
	151, 152, 531, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 373, 160, 161, 472, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 500, 168, 169, 374, 170,
	532, 234, 171, 0, 172, 173, 175, 533, 174, 507,
	0, 176, 0, 177, 178, 0, 237, 534, 535, 0,
	1137, 179, 508, 509, 481, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 501, 0, 187, 188, 189, 242,
	536, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 459, 487, 476, 477, 474, 475, 463, 0, 0,
	0, 0, 455, 456, 86, 87, 0, 88, 457, 0,
	0, 464, 503, 469, 0, 0, 0, 89, 90, 196,
	517, 198, 518, 91, 519, 520, 0, 92, 202, 203,
	93, 484, 502, 521, 522, 206, 0, 513, 0, 495,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	362, 100, 101, 0, 496, 498, 0, 497, 499, 102,
	103, 104, 105, 523, 106, 524, 525, 0, 107, 0,
	108, 0, 0, 0, 516, 110, 0, 111, 0, 0,
	0, 468, 112, 113, 504, 482, 0, 0, 114, 115,
	526, 0, 116, 0, 117, 0, 0, 363, 214, 0,
	118, 514, 0, 216, 0, 119, 120, 510, 512, 365,
	0, 123, 0, 121, 0, 364, 122, 527, 528, 529,
	0, 494, 0, 366, 124, 367, 125, 126, 0, 0,
	515, 368, 127, 369, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 370, 135, 136, 139, 137,
	458, 138, 483, 511, 140, 530, 141, 142, 0, 0,
	0, 0, 0, 143, 226, 371, 144, 372, 505, 145,
	146, 147, 0, 506, 148, 229, 149, 0, 150, 151,
	152, 531, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 373, 160, 161, 472, 162, 0, 163, 164, 165,
	0, 232, 166, 167, 500, 168, 169, 374, 170, 532,
	234, 171, 0, 172, 173, 175, 533, 174, 507, 0,
	176, 0, 177, 178, 0, 237, 534, 535, 0, 0,
	179, 508, 509, 481, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 501, 0, 187, 188, 189, 242, 536,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	459, 0, 0, 487, 476, 477, 474, 475, 463, 0,
	0, 455, 456, 0, 0, 86, 87, 457, 88, 0,
	464, 1497, 0, 503, 469, 0, 0, 0, 89, 90,
	196, 517, 198, 518, 91, 519, 520, 0, 92, 202,
	203, 93, 484, 502, 521, 522, 206, 0, 513, 0,
	495, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 362, 100, 101, 0, 496, 498, 0, 497, 499,
	102, 103, 104, 105, 523, 106, 524, 525, 0, 107,
	0, 108, 0, 0, 0, 516, 110, 0, 111, 0,
	0, 0, 468, 112, 113, 504, 482, 0, 0, 114,
	115, 526, 0, 116, 0, 117, 0, 0, 363, 214,
	0, 118, 514, 0, 216, 0, 119, 120, 510, 512,
	365, 0, 123, 0, 121, 0, 364, 122, 527, 528,
	529, 0, 494, 0, 366, 124, 367, 125, 126, 0,
	0, 515, 368, 127, 369, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 370, 135, 136, 139,
	137, 458, 138, 483, 511, 140, 530, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 371, 144, 372, 505,
	145, 146, 147, 0, 506, 148, 229, 149, 0, 150,
	151, 152, 531, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 373, 160, 161, 472, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 500, 168, 169, 374, 170,
	532, 234, 171, 0, 172, 173, 175, 533, 174, 507,
	0, 176, 0, 177, 178, 0, 237, 534, 535, 0,
	0, 179, 508, 509, 481, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 501, 0, 187, 188, 189, 242,
	536, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 459, 0, 0, 487, 476, 477, 474, 475, 463,
	0, 0, 455, 456, 0, 0, 86, 87, 457, 88,
	0, 464, 1447, 0, 503, 469, 0, 0, 0, 89,
	90, 196, 517, 198, 518, 91, 519, 520, 0, 92,
	202, 203, 93, 484, 502, 521, 522, 206, 0, 513,
	0, 495, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 362, 100, 101, 0, 496, 498, 0, 497,
	499, 102, 103, 104, 105, 523, 106, 524, 525, 0,
	107, 0, 108, 0, 0, 0, 516, 110, 0, 111,
	0, 0, 0, 468, 112, 113, 504, 482, 0, 0,
	114, 115, 526, 0, 116, 0, 117, 0, 0, 363,
	214, 0, 118, 514, 0, 216, 0, 119, 120, 510,
	512, 365, 0, 123, 0, 121, 0, 364, 122, 527,
	528, 529, 0, 494, 0, 366, 124, 367, 125, 126,
	0, 0, 515, 368, 127, 369, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 370, 135, 136,
	139, 137, 458, 138, 483, 511, 140, 530, 141, 142,
	0, 0, 0, 0, 0, 143, 226, 371, 144, 372,
	505, 145, 146, 147, 0, 506, 148, 229, 149, 0,
	150, 151, 152, 531, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 373, 160, 161, 472, 162, 0, 163,
	164, 165, 0, 232, 166, 167, 500, 168, 169, 374,
	170, 532, 234, 171, 0, 172, 173, 175, 533, 174,
	507, 0, 176, 0, 177, 178, 0, 237, 534, 535,
	0, 0, 179, 508, 509, 481, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 501, 0, 187, 188, 189,
	242, 536, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 459, 0, 0, 487, 476, 477, 474, 475,
	463, 0, 0, 455, 456, 0, 0, 86, 87, 457,
	88, 0, 464, 1092, 0, 503, 469, 0, 0, 0,
	89, 90, 196, 517, 198, 518, 91, 519, 520, 0,
	92, 202, 203, 93, 484, 502, 521, 522, 206, 0,
	513, 0, 495, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 362, 100, 101, 0, 496, 498, 0,
	497, 499, 102, 103, 104, 105, 523, 106, 524, 525,
	0, 107, 0, 108, 0, 0, 0, 516, 110, 0,
	111, 0, 0, 0, 468, 112, 113, 504, 482, 0,
	0, 114, 115, 526, 0, 116, 0, 117, 0, 0,
	363, 214, 0, 118, 514, 0, 216, 0, 119, 120,
	510, 512, 365, 0, 123, 0, 121, 0, 364, 122,
	527, 528, 529, 0, 494, 0, 366, 124, 367, 125,
	126, 0, 0, 515, 368, 127, 369, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 370, 135,
	136, 139, 137, 458, 138, 483, 511, 140, 530, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 371, 144,
	372, 505, 145, 146, 147, 0, 506, 148, 229, 149,
	0, 150, 151, 152, 531, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 373, 160, 161, 472, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 500, 168, 169,
	374, 170, 532, 234, 171, 0, 172, 173, 175, 533,
	174, 507, 0, 176, 0, 177, 178, 0, 237, 534,
	535, 0, 0, 179, 508, 509, 481, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 501, 0, 187, 188,
	189, 242, 536, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 459, 487, 476, 477, 474, 475, 463,
	0, 0, 0, 0, 455, 456, 86, 87, 0, 88,
	457, 857, 1089, 464, 503, 469, 0, 0, 0, 89,
	90, 196, 517, 198, 518, 91, 519, 520, 0, 92,
	202, 203, 93, 484, 502, 521, 522, 206, 0, 513,
	0, 495, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 362, 100, 101, 0, 496, 498, 0, 497,
	499, 102, 103, 104, 105, 523, 106, 524, 525, 0,
	107, 0, 108, 0, 0, 0, 516, 110, 0, 111,
	0, 0, 0, 468, 112, 113, 504, 482, 0, 0,
	114, 115, 526, 0, 116, 0, 117, 0, 0, 363,
	214, 0, 118, 514, 0, 216, 0, 119, 120, 510,
	512, 365, 0, 123, 0, 121, 0, 364, 122, 527,
	528, 529, 0, 494, 0, 366, 124, 367, 125, 126,
	0, 0, 515, 368, 127, 369, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 370, 135, 136,
	139, 137, 458, 138, 483, 511, 140, 530, 141, 142,
	0, 0, 0, 0, 0, 143, 226, 371, 144, 372,
	505, 145, 146, 147, 0, 506, 148, 229, 149, 0,
	150, 151, 152, 531, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 373, 160, 161, 472, 162, 0, 163,
	164, 165, 0, 232, 166, 167, 500, 168, 169, 374,
	170, 532, 234, 171, 0, 172, 173, 175, 533, 174,
	507, 0, 176, 0, 177, 178, 0, 237, 534, 535,
	0, 0, 179, 508, 509, 481, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 501, 0, 187, 188, 189,
	242, 536, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 459, 0, 0, 487, 476, 477, 474, 475,
	463, 0, 0, 455, 456, 453, 0, 86, 87, 457,
	88, 0, 464, 0, 0, 503, 469, 0, 0, 0,
	89, 90, 196, 517, 198, 518, 91, 519, 520, 0,
	92, 202, 203, 93, 484, 502, 521, 522, 206, 0,
	513, 0, 495, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 362, 100, 101, 0, 496, 498, 0,
	497, 499, 102, 103, 104, 105, 523, 106, 524, 525,
	0, 107, 0, 108, 0, 0, 0, 516, 110, 0,
	111, 0, 0, 0, 468, 112, 113, 504, 482, 0,
	0, 114, 115, 526, 0, 116, 0, 117, 0, 0,
	363, 214, 0, 118, 514, 0, 216, 0, 119, 120,
	510, 512, 365, 0, 123, 0, 121, 0, 364, 122,
	527, 528, 529, 0, 494, 0, 366, 124, 367, 125,
	126, 0, 0, 515, 368, 127, 369, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 370, 135,
	136, 139, 137, 458, 138, 483, 511, 140, 530, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 371, 144,
	372, 505, 145, 146, 147, 0, 506, 148, 229, 149,
	0, 150, 151, 152, 531, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 373, 160, 161, 472, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 500, 168, 169,
	374, 170, 532, 234, 171, 0, 172, 173, 175, 533,
	174, 507, 0, 176, 0, 177, 178, 0, 237, 534,
	535, 0, 0, 179, 508, 509, 481, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 501, 0, 187, 188,
	189, 242, 536, 1452, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 459, 487, 476, 477, 474, 475, 463,
	0, 0, 0, 0, 455, 456, 86, 87, 0, 88,
	457, 0, 0, 464, 503, 469, 0, 0, 0, 89,
	90, 196, 517, 198, 518, 91, 519, 520, 0, 92,
	202, 203, 93, 484, 502, 521, 522, 206, 0, 513,
	0, 495, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 362, 100, 101, 0, 496, 498, 0, 497,
	499, 102, 103, 104, 105, 523, 106, 524, 525, 557,
	107, 0, 108, 0, 0, 0, 516, 110, 0, 111,
	0, 0, 0, 468, 112, 113, 504, 482, 0, 0,
	114, 115, 526, 0, 116, 0, 117, 0, 0, 363,
	214, 0, 118, 514, 0, 216, 0, 119, 120, 510,
	512, 365, 0, 123, 0, 121, 0, 364, 122, 527,
	528, 529, 0, 494, 0, 366, 124, 367, 125, 126,
	0, 0, 515, 368, 127, 369, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 370, 135, 136,
	139, 137, 458, 138, 483, 511, 140, 530, 141, 142,
	0, 0, 0, 0, 0, 143, 226, 371, 144, 372,
	505, 145, 146, 147, 0, 506, 148, 229, 149, 0,
	150, 151, 152, 531, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 373, 160, 161, 472, 162, 0, 163,
	164, 165, 0, 232, 166, 167, 500, 168, 169, 374,
	170, 532, 234, 171, 0, 172, 173, 175, 533, 174,
	507, 0, 176, 0, 177, 178, 0, 237, 534, 535,
	0, 0, 179, 508, 509, 481, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 501, 0, 187, 188, 189,
	242, 536, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 459, 487, 476, 477, 474, 475, 463, 0,
	0, 0, 0, 455, 456, 86, 87, 0, 88, 457,
	0, 0, 464, 503, 469, 0, 0, 0, 89, 90,
	196, 517, 198, 518, 91, 519, 520, 0, 92, 202,
	203, 93, 484, 502, 521, 522, 206, 0, 513, 0,
	495, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 362, 100, 101, 0, 496, 498, 0, 497, 499,
	102, 103, 104, 105, 523, 106, 524, 525, 0, 107,
	0, 108, 0, 0, 0, 516, 110, 0, 111, 0,
	0, 0, 468, 112, 113, 504, 482, 0, 0, 114,
	115, 526, 0, 116, 0, 117, 0, 1140, 363, 214,
	0, 118, 514, 0, 216, 0, 119, 120, 510, 512,
	365, 0, 123, 0, 121, 0, 364, 122, 527, 528,
	529, 0, 494, 0, 366, 124, 367, 125, 126, 0,
	0, 515, 368, 127, 369, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 370, 135, 136, 139,
	137, 458, 138, 483, 511, 140, 530, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 371, 144, 372, 505,
	145, 146, 147, 0, 506, 148, 229, 149, 0, 150,
	151, 152, 531, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 373, 160, 161, 472, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 500, 168, 169, 374, 170,
	532, 234, 171, 0, 172, 173, 175, 533, 174, 507,
	0, 176, 0, 177, 178, 0, 237, 534, 535, 0,
	0, 179, 508, 509, 481, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 501, 0, 187, 188, 189, 242,
	536, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 459, 487, 476, 477, 474, 475, 463, 0, 0,
	0, 0, 455, 456, 86, 87, 796, 88, 457, 0,
	0, 464, 503, 469, 0, 0, 0, 89, 90, 196,
	517, 198, 518, 91, 519, 520, 0, 92, 202, 203,
	93, 484, 502, 521, 522, 206, 0, 513, 0, 495,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	362, 100, 101, 0, 496, 498, 0, 497, 499, 102,
	103, 104, 105, 523, 106, 524, 525, 0, 107, 0,
	108, 0, 0, 0, 516, 110, 0, 111, 0, 0,
	0, 468, 112, 113, 504, 482, 0, 0, 114, 115,
	526, 0, 116, 0, 117, 0, 0, 363, 214, 0,
	118, 514, 0, 216, 0, 119, 120, 510, 512, 365,
	0, 123, 0, 121, 0, 364, 122, 527, 528, 529,
	0, 494, 0, 366, 124, 367, 125, 126, 0, 0,
	515, 368, 127, 369, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 370, 135, 136, 139, 137,
	458, 138, 483, 511, 140, 530, 141, 142, 0, 0,
	0, 0, 0, 143, 226, 371, 144, 372, 505, 145,
	146, 147, 0, 506, 148, 229, 149, 0, 150, 151,
	152, 531, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 373, 160, 161, 472, 162, 0, 163, 164, 165,
	0, 232, 166, 167, 500, 168, 169, 374, 170, 532,
	234, 171, 0, 172, 173, 175, 533, 174, 507, 0,
	176, 0, 177, 178, 0, 237, 534, 535, 0, 0,
	179, 508, 509, 481, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 501, 0, 187, 188, 189, 242, 536,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	459, 487, 476, 477, 474, 475, 463, 0, 0, 0,
	0, 455, 456, 86, 87, 0, 88, 457, 0, 0,
	464, 503, 469, 0, 0, 0, 89, 90, 196, 517,
	198, 518, 91, 519, 520, 0, 92, 202, 203, 93,
	484, 502, 521, 522, 206, 0, 513, 0, 495, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 362,
	100, 1791, 0, 496, 498, 0, 497, 499, 102, 103,
	104, 105, 523, 106, 524, 525, 0, 107, 0, 108,
	0, 0, 0, 516, 110, 0, 111, 0, 0, 0,
	468, 112, 113, 504, 482, 0, 0, 114, 115, 526,
	0, 116, 0, 117, 0, 0, 363, 214, 0, 118,
	514, 0, 216, 0, 119, 120, 510, 512, 365, 0,
	123, 0, 121, 0, 364, 122, 527, 528, 529, 0,
	494, 0, 366, 124, 367, 125, 126, 0, 0, 515,
	368, 127, 369, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 370, 135, 136, 139, 137, 458,
	138, 483, 511, 140, 530, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 371, 144, 372, 505, 145, 146,
	147, 0, 506, 148, 229, 149, 0, 150, 151, 152,
	531, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	373, 160, 161, 472, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 500, 168, 169, 374, 170, 532, 234,
	171, 0, 172, 173, 175, 533, 174, 507, 0, 176,
	0, 177, 178, 0, 237, 534, 535, 0, 0, 179,
	508, 509, 481, 180, 181, 1790, 183, 0, 0, 184,
	185, 186, 501, 0, 187, 188, 189, 242, 536, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 459,
	487, 476, 477, 474, 475, 463, 0, 0, 0, 0,
	455, 456, 86, 87, 0, 88, 457, 0, 0, 464,
	503, 469, 0, 0, 0, 89, 90, 1789, 517, 198,
	518, 91, 519, 520, 0, 92, 202, 203, 93, 484,
	502, 521, 522, 206, 0, 513, 0, 495, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 362, 100,
	1791, 0, 496, 498, 0, 497, 499, 102, 103, 104,
	105, 523, 106, 524, 525, 0, 107, 0, 108, 0,
	0, 0, 516, 110, 0, 111, 0, 0, 0, 468,
	112, 113, 504, 482, 0, 0, 114, 115, 526, 0,
	116, 0, 117, 0, 0, 363, 214, 0, 118, 514,
	0, 216, 0, 119, 120, 510, 512, 365, 0, 123,
	0, 121, 0, 364, 122, 527, 528, 529, 0, 494,
	0, 366, 124, 367, 125, 126, 0, 0, 515, 368,
	127, 369, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 370, 135, 136, 139, 137, 458, 138,
	483, 511, 140, 530, 141, 142, 0, 0, 0, 0,
	0, 143, 226, 371, 144, 372, 505, 145, 146, 147,
	0, 506, 148, 229, 149, 0, 150, 151, 152, 531,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 373,
	160, 161, 472, 162, 0, 163, 164, 165, 0, 232,
	166, 167, 500, 168, 169, 374, 170, 532, 234, 171,
	0, 172, 173, 175, 533, 174, 507, 0, 176, 0,
	177, 178, 0, 237, 534, 535, 0, 0, 179, 508,
	509, 481, 180, 181, 1790, 183, 0, 0, 184, 185,
	186, 501, 0, 187, 188, 189, 242, 536, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 459, 487,
	476, 477, 474, 475, 463, 0, 0, 0, 0, 455,
	456, 86, 87, 0, 88, 457, 0, 0, 464, 503,
	469, 0, 0, 0, 89, 90, 196, 517, 198, 518,
	91, 519, 520, 0, 92, 202, 203, 93, 484, 502,
	521, 522, 206, 0, 513, 0, 495, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 362, 100, 101,
	0, 496, 498, 0, 497, 499, 102, 103, 104, 105,
	523, 106, 524, 525, 0, 107, 0, 108, 0, 0,
	0, 516, 110, 0, 111, 0, 0, 0, 468, 112,
	113, 504, 482, 0, 0, 114, 115, 526, 0, 116,
	0, 117, 0, 0, 363, 214, 0, 118, 514, 0,
	216, 0, 119, 120, 510, 512, 365, 0, 123, 0,
	121, 0, 364, 122, 527, 528, 529, 0, 494, 0,
	366, 124, 367, 125, 126, 0, 0, 515, 368, 127,
	369, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 370, 135, 136, 139, 137, 458, 138, 483,
	511, 140, 530, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 371, 144, 372, 505, 145, 146, 147, 0,
	506, 148, 229, 149, 0, 150, 151, 152, 531, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 373, 160,
	161, 472, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 500, 168, 169, 374, 170, 532, 234, 171, 0,
	172, 173, 175, 533, 174, 507, 0, 176, 0, 177,
	178, 0, 237, 534, 535, 0, 0, 179, 508, 509,
	481, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	501, 0, 187, 188, 189, 242, 536, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 459, 487, 476,
	477, 474, 475, 463, 0, 0, 0, 0, 455, 456,
	86, 87, 0, 88, 457, 0, 0, 464, 503, 469,
	0, 0, 0, 89, 90, 196, 517, 198, 518, 91,
	519, 520, 0, 92, 202, 203, 93, 484, 502, 521,
	522, 206, 0, 513, 0, 495, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 362, 100, 101, 0,
	496, 498, 0, 497, 499, 102, 103, 104, 105, 523,
	106, 524, 525, 0, 107, 0, 108, 0, 0, 0,
	516, 110, 0, 111, 0, 0, 0, 468, 112, 113,
	504, 482, 0, 0, 114, 115, 526, 0, 116, 0,
	117, 0, 0, 363, 214, 0, 118, 514, 0, 216,
	0, 119, 120, 510, 512, 365, 0, 123, 0, 121,
	0, 364, 122, 527, 528, 529, 0, 494, 0, 366,
	124, 367, 125, 126, 0, 0, 515, 368, 127, 369,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 370, 135, 136, 139, 137, 0, 138, 483, 511,
	140, 530, 141, 142, 0, 0, 0, 0, 0, 143,
	226, 371, 144, 372, 505, 145, 146, 147, 0, 506,
	148, 229, 149, 0, 150, 151, 152, 531, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 373, 160, 161,
	1130, 162, 0, 163, 164, 165, 0, 232, 166, 167,
	500, 168, 169, 374, 170, 532, 234, 171, 0, 172,
	173, 175, 533, 174, 507, 0, 176, 0, 177, 178,
	0, 237, 534, 535, 0, 0, 179, 508, 509, 481,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 501,
	0, 187, 188, 189, 242, 536, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 487, 476, 477,
	474, 475, 463, 0, 0, 0, 0, 1126, 1127, 86,
	87, 0, 88, 1128, 0, 0, 1129, 503, 469, 0,
	0, 0, 89, 90, 0, 517, 198, 518, 91, 519,
	520, 0, 92, 202, 203, 93, 484, 502, 521, 522,
	206, 0, 513, 0, 495, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 362, 100, 1791, 0, 496,
	498, 0, 497, 499, 102, 103, 104, 105, 523, 106,
	524, 525, 0, 107, 0, 108, 0, 0, 0, 516,
	110, 0, 111, 0, 0, 0, 468, 112, 113, 504,
	482, 0, 0, 114, 115, 526, 0, 116, 0, 117,
	0, 0, 363, 214, 0, 118, 514, 0, 216, 0,
	119, 120, 510, 512, 0, 0, 123, 0, 121, 0,
	364, 122, 527, 528, 529, 0, 494, 0, 0, 124,
	367, 125, 126, 0, 0, 515, 368, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	370, 135, 136, 139, 137, 458, 138, 483, 511, 140,
	530, 141, 142, 0, 0, 0, 0, 0, 143, 226,
	371, 144, 372, 505, 145, 146, 147, 0, 506, 148,
	229, 149, 0, 150, 151, 152, 531, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 373, 160, 161, 472,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 500,
	168, 169, 0, 170, 532, 234, 171, 0, 172, 173,
	175, 533, 174, 507, 0, 176, 0, 177, 178, 0,
	237, 534, 535, 0, 0, 179, 508, 509, 481, 180,
	181, 1790, 183, 0, 0, 184, 185, 186, 501, 0,
	187, 188, 189, 242, 536, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 455, 456, 86, 87,
	0, 88, 457, 0, 0, 464, 503, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 502, 204, 205, 206,
	0, 513, 0, 495, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 362, 100, 101, 0, 496, 498,
	0, 497, 499, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 504, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 363, 214, 0, 118, 514, 0, 216, 0, 119,
	120, 510, 512, 365, 0, 123, 0, 121, 0, 364,
	122, 219, 220, 221, 0, 222, 0, 366, 124, 367,
	125, 126, 0, 0, 515, 368, 127, 369, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 370,
	135, 136, 139, 137, 0, 138, 0, 511, 140, 225,
	141, 142, 0, 0, 0, 0, 0, 143, 226, 371,
	144, 372, 505, 145, 146, 147, 0, 506, 148, 229,
	149, 0, 150, 151, 152, 230, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 373, 160, 161, 231, 162,
	0, 163, 164, 165, 0, 232, 166, 167, 500, 168,
	169, 374, 170, 233, 234, 171, 0, 172, 173, 175,
	235, 174, 507, 0, 176, 0, 177, 178, 0, 237,
	238, 239, 0, 0, 179, 508, 509, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 501, 0, 187,
	188, 189, 242, 243, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 1562, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 361, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 362, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	363, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	217, 218, 365, 0, 123, 0, 121, 0, 364, 122,
	219, 220, 221, 0, 222, 0, 366, 124, 367, 125,
	126, 0, 0, 223, 368, 127, 369, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 370, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 371, 144,
	372, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 373, 160, 161, 231, 162, 0,
	163, 164, 165, 56, 232, 166, 167, 0, 168, 169,
	374, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 58, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 360, 243, 0, 190, 0, 0, 0, 54, 191,
	192, 193, 194, 0, 55, 356, 667, 0, 668, 663,
	658, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 53, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 361, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 362, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	671, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 660, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	363, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	217, 218, 365, 0, 123, 0, 121, 0, 364, 122,
	219, 220, 221, 0, 222, 0, 366, 124, 367, 125,
	126, 0, 0, 223, 368, 127, 369, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 370, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 661, 0, 0, 0, 143, 226, 371, 144,
	372, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 373, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	374, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 0, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 659, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 356, 667, 0, 668, 663, 658,
	0, 0, 0, 0, 669, 664, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 361, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 362, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 654,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 660, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 363,
	214, 0, 118, 215, 0, 216, 0, 119, 120, 217,
	218, 365, 0, 123, 0, 121, 0, 364, 122, 219,
	220, 221, 0, 222, 0, 366, 124, 367, 125, 126,
	0, 0, 223, 368, 127, 369, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 370, 135, 136,
	139, 137, 0, 138, 0, 224, 140, 225, 141, 142,
	0, 661, 0, 0, 0, 143, 226, 371, 144, 372,
	227, 145, 146, 147, 0, 228, 148, 229, 149, 0,
	150, 151, 152, 230, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 373, 160, 161, 231, 162, 0, 163,
	164, 165, 0, 232, 166, 167, 0, 168, 169, 374,
	170, 233, 234, 171, 0, 172, 173, 175, 235, 174,
	236, 0, 176, 0, 177, 178, 0, 237, 238, 239,
	0, 0, 179, 240, 241, 659, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	242, 243, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 356, 667, 0, 668, 663, 658, 0,
	0, 0, 0, 669, 664, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	361, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 362, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 660, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 363, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	365, 0, 123, 0, 121, 0, 364, 122, 219, 220,
	221, 0, 222, 0, 366, 124, 367, 125, 126, 0,
	0, 223, 368, 127, 369, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 370, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	661, 0, 0, 0, 143, 226, 371, 144, 372, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 373, 160, 161, 231, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 374, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 237, 238, 239, 0,
	0, 179, 240, 241, 659, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 669, 664, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 217, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 329,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 56,
	232, 166, 167, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	58, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 360, 243, 0,
	190, 0, 0, 0, 54, 191, 192, 193, 194, 0,
	55, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 1035,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 217, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 56,
	232, 166, 167, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	58, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 360, 243, 0,
	190, 0, 0, 0, 54, 191, 192, 193, 194, 0,
	55, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 53,
	0, 195, 0, 1250, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 217, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	445, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 217, 218, 0, 0, 123, 0,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 329, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 147, 0,
	228, 148, 229, 149, 0, 150, 151, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 1035, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 214, 0, 118, 215, 0, 216,
	0, 119, 120, 217, 218, 0, 0, 123, 0, 121,
	0, 0, 122, 219, 220, 221, 0, 222, 0, 0,
	124, 0, 125, 126, 0, 0, 223, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 224,
	140, 225, 141, 142, 0, 0, 0, 0, 0, 143,
	226, 0, 144, 0, 227, 145, 146, 147, 0, 228,
	148, 229, 149, 0, 150, 151, 152, 230, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	231, 162, 0, 163, 164, 165, 0, 232, 166, 167,
	0, 168, 169, 0, 170, 233, 234, 171, 0, 172,
	173, 175, 235, 174, 236, 0, 176, 0, 177, 178,
	0, 237, 238, 239, 0, 0, 179, 240, 241, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 242, 243, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 946, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 214, 0, 118, 215, 0, 216, 0,
	119, 120, 217, 218, 0, 0, 123, 0, 121, 0,
	0, 122, 219, 220, 221, 0, 222, 0, 0, 124,
	0, 125, 126, 0, 0, 223, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 224, 140,
	225, 141, 142, 0, 0, 0, 0, 0, 143, 226,
	0, 144, 0, 227, 145, 146, 147, 0, 228, 148,
	229, 149, 0, 150, 151, 152, 230, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 231,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 0,
	168, 169, 0, 170, 233, 234, 171, 0, 172, 173,
	175, 235, 174, 236, 0, 176, 0, 177, 178, 0,
	237, 238, 239, 0, 0, 179, 240, 241, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 242, 243, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 1462, 195, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 214, 0, 118, 215, 0, 216, 0, 119,
	120, 217, 218, 0, 0, 123, 0, 121, 0, 0,
	122, 219, 220, 221, 0, 222, 0, 0, 124, 0,
	125, 126, 0, 0, 223, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 224, 140, 225,
	141, 142, 0, 0, 0, 0, 0, 143, 226, 0,
	144, 0, 227, 145, 146, 147, 0, 228, 148, 229,
	149, 0, 150, 151, 152, 230, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 231, 162,
	0, 163, 164, 165, 0, 232, 166, 167, 0, 168,
	169, 0, 170, 233, 234, 171, 0, 172, 173, 175,
	235, 174, 236, 0, 176, 0, 177, 178, 0, 237,
	238, 239, 0, 0, 179, 240, 241, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 242, 243, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 547, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 638, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	217, 218, 0, 0, 123, 0, 121, 0, 0, 122,
	219, 220, 221, 0, 222, 0, 0, 124, 0, 125,
	126, 0, 0, 223, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 0, 144,
	0, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	0, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 637, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 641, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	0, 0, 123, 0, 121, 0, 0, 122, 219, 220,
	221, 0, 222, 0, 0, 124, 0, 125, 126, 0,
	0, 223, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 0, 144, 0, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 231, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 0, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 237, 238, 239, 0,
	0, 179, 240, 241, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 356, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 641, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 361, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 362,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 363, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 217, 218, 365, 0,
	123, 0, 121, 0, 364, 122, 219, 220, 221, 0,
	222, 0, 366, 124, 367, 125, 126, 0, 0, 223,
	368, 127, 369, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 370, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 371, 144, 372, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	373, 160, 161, 231, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 0, 168, 169, 374, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 919, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 917, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 1012, 0, 114, 115, 213, 0, 116,
	0, 117, 922, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 217, 218, 0, 0, 123, 1010,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 147, 0,
	228, 148, 229, 149, 921, 150, 151, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 1011, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 919, 207, 0, 0, 914, 94, 95, 96, 0,
	97, 917, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	922, 0, 0, 214, 0, 118, 215, 0, 216, 0,
	119, 120, 913, 218, 0, 0, 123, 0, 121, 0,
	0, 122, 219, 220, 221, 0, 222, 0, 0, 124,
	0, 125, 126, 0, 0, 223, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 224, 140,
	225, 141, 142, 0, 0, 0, 0, 0, 143, 226,
	0, 144, 0, 227, 145, 146, 147, 0, 228, 148,
	229, 149, 921, 150, 151, 152, 230, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 231,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 0,
	168, 169, 0, 170, 233, 234, 171, 0, 172, 173,
	175, 235, 174, 236, 0, 176, 0, 177, 178, 0,
	237, 238, 239, 0, 0, 179, 240, 241, 0, 180,
	181, 182, 183, 0, 920, 184, 185, 186, 0, 0,
	187, 188, 189, 242, 243, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 1250, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	217, 218, 0, 0, 123, 0, 121, 0, 0, 122,
	219, 220, 221, 0, 222, 0, 0, 124, 0, 125,
	126, 0, 0, 223, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 0, 144,
	0, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	0, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 0, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	0, 0, 123, 0, 121, 0, 0, 122, 219, 220,
	221, 0, 222, 0, 0, 124, 0, 125, 126, 0,
	0, 223, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	0, 329, 0, 0, 143, 226, 0, 144, 0, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 231, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 0, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 237, 238, 239, 0,
	0, 179, 240, 241, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 589, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 329,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 381, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 217, 218, 0, 0, 123, 0,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 147, 0,
	228, 148, 229, 149, 0, 150, 151, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 214, 0, 118, 215, 0, 216, 0,
	119, 120, 335, 218, 0, 0, 123, 0, 121, 0,
	0, 122, 219, 220, 221, 0, 222, 0, 0, 124,
	0, 125, 126, 0, 0, 223, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 224, 140,
	225, 141, 142, 0, 0, 329, 0, 0, 143, 226,
	0, 144, 0, 227, 145, 146, 147, 0, 228, 148,
	229, 149, 0, 150, 151, 152, 230, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 231,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 0,
	168, 169, 0, 170, 233, 234, 171, 0, 172, 173,
	175, 235, 174, 236, 0, 176, 0, 177, 178, 0,
	237, 238, 239, 0, 0, 179, 240, 241, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 242, 243, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 247,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	217, 218, 0, 0, 123, 0, 121, 0, 0, 122,
	219, 220, 221, 0, 222, 0, 0, 124, 0, 125,
	126, 0, 0, 223, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 0, 144,
	0, 227, 145, 146, 147, 0, 228, 148, 229, 246,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	0, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 0, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	0, 0, 123, 0, 121, 0, 0, 122, 219, 220,
	221, 0, 222, 0, 0, 124, 0, 125, 126, 0,
	0, 223, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 0, 144, 0, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 231, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 0, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 237, 238, 239, 0,
	0, 179, 240, 241, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 1176, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 1174, 218, 0, 0, 123, 0,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 147, 0,
	228, 148, 229, 149, 0, 150, 151, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 214, 0, 118, 215, 0, 216, 0,
	119, 120, 1165, 218, 0, 0, 123, 0, 121, 0,
	0, 122, 219, 220, 221, 0, 222, 0, 0, 124,
	0, 125, 126, 0, 0, 223, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 224, 140,
	225, 141, 142, 0, 0, 0, 0, 0, 143, 226,
	0, 144, 0, 227, 145, 146, 147, 0, 228, 148,
	229, 149, 0, 150, 151, 152, 230, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 231,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 0,
	168, 169, 0, 170, 233, 234, 171, 0, 172, 173,
	175, 235, 174, 236, 0, 176, 0, 177, 178, 0,
	237, 238, 239, 0, 0, 179, 240, 241, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 242, 243, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	786, 218, 0, 0, 123, 0, 121, 0, 0, 122,
	219, 220, 221, 0, 222, 0, 0, 124, 0, 125,
	126, 0, 0, 223, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 0, 144,
	0, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	0, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 0, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	0, 0, 123, 0, 121, 0, 0, 122, 219, 220,
	221, 0, 222, 0, 0, 124, 0, 125, 126, 0,
	0, 223, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 0, 144, 0, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 231, 162, 0, 261, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 0, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 237, 238, 239, 0,
	0, 179, 240, 241, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 576, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 217, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 0, 0, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 430, 218, 0, 0, 123, 0,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 147, 0,
	228, 148, 229, 149, 0, 150, 151, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 214, 0, 118, 215, 0, 216, 0,
	119, 120, 427, 218, 0, 0, 123, 0, 121, 0,
	0, 122, 219, 220, 221, 0, 222, 0, 0, 124,
	0, 125, 126, 0, 0, 223, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 224, 140,
	225, 141, 142, 0, 0, 0, 0, 0, 143, 226,
	0, 144, 0, 227, 145, 146, 147, 0, 228, 148,
	229, 149, 0, 150, 151, 152, 230, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 231,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 0,
	168, 169, 0, 170, 233, 234, 171, 0, 172, 173,
	175, 235, 174, 236, 0, 176, 0, 177, 178, 0,
	237, 238, 239, 0, 0, 179, 240, 241, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 242, 243, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 387, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	217, 218, 0, 0, 123, 0, 121, 0, 0, 122,
	219, 220, 221, 0, 222, 0, 0, 124, 0, 125,
	126, 0, 0, 223, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 272, 0, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 0, 144,
	0, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	0, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 0, 177, 178, 0, 271, 238,
	239, 0, 0, 267, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	0, 0, 123, 0, 121, 0, 0, 122, 219, 220,
	221, 0, 222, 0, 0, 124, 0, 125, 126, 0,
	0, 223, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 272, 0, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 0, 144, 0, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 231, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 0, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 271, 238, 239, 0,
	0, 267, 240, 241, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 351, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 231, 162, 0, 163, 164, 165, 0,
	232, 166, 167, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 237, 238, 239, 0, 0, 179,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 348, 218, 0, 0, 123, 0,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 147, 0,
	228, 148, 229, 149, 0, 150, 151, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 162, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 214, 0, 118, 215, 0, 216, 0,
	119, 120, 346, 218, 0, 0, 123, 0, 121, 0,
	0, 122, 219, 220, 221, 0, 222, 0, 0, 124,
	0, 125, 126, 0, 0, 223, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 224, 140,
	225, 141, 142, 0, 0, 0, 0, 0, 143, 226,
	0, 144, 0, 227, 145, 146, 147, 0, 228, 148,
	229, 149, 0, 150, 151, 152, 230, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 231,
	162, 0, 163, 164, 165, 0, 232, 166, 167, 0,
	168, 169, 0, 170, 233, 234, 171, 0, 172, 173,
	175, 235, 174, 236, 0, 176, 0, 177, 178, 0,
	237, 238, 239, 0, 0, 179, 240, 241, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 242, 243, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 214, 0, 118, 215, 0, 216, 0, 119, 120,
	338, 218, 0, 0, 123, 0, 121, 0, 0, 122,
	219, 220, 221, 0, 222, 0, 0, 124, 0, 125,
	126, 0, 0, 223, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 224, 140, 225, 141,
	142, 0, 0, 0, 0, 0, 143, 226, 0, 144,
	0, 227, 145, 146, 147, 0, 228, 148, 229, 149,
	0, 150, 151, 152, 230, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 231, 162, 0,
	163, 164, 165, 0, 232, 166, 167, 0, 168, 169,
	0, 170, 233, 234, 171, 0, 172, 173, 175, 235,
	174, 236, 0, 176, 0, 177, 178, 0, 237, 238,
	239, 0, 0, 179, 240, 241, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 242, 243, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 214,
	0, 118, 215, 0, 216, 0, 119, 120, 217, 218,
	0, 0, 123, 0, 121, 0, 0, 122, 219, 220,
	221, 0, 222, 0, 0, 124, 0, 125, 126, 0,
	0, 223, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 224, 140, 225, 141, 142, 0,
	0, 0, 0, 0, 143, 226, 0, 144, 0, 227,
	145, 146, 147, 0, 228, 148, 229, 149, 0, 150,
	151, 152, 230, 318, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 231, 162, 0, 163, 164,
	165, 0, 232, 166, 167, 0, 168, 169, 0, 170,
	233, 234, 171, 0, 172, 173, 175, 235, 174, 236,
	0, 176, 0, 177, 178, 0, 237, 238, 239, 0,
	0, 179, 240, 241, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 242,
	243, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 214, 0, 118,
	215, 0, 216, 0, 119, 120, 217, 218, 0, 0,
	123, 0, 121, 0, 0, 122, 219, 220, 221, 0,
	222, 0, 0, 124, 0, 125, 126, 0, 0, 223,
	0, 127, 0, 0, 264, 0, 0, 129, 0, 130,
	131, 132, 133, 272, 0, 135, 136, 139, 137, 0,
	138, 0, 224, 140, 225, 141, 142, 0, 0, 0,
	0, 0, 143, 226, 0, 144, 0, 227, 145, 146,
	147, 0, 228, 148, 229, 149, 0, 150, 151, 152,
	230, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 266, 162, 0, 163, 164, 165, 0,
	232, 166, 265, 0, 168, 169, 0, 170, 233, 234,
	171, 0, 172, 173, 175, 235, 174, 236, 0, 176,
	0, 177, 178, 0, 271, 238, 239, 0, 0, 267,
	240, 241, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 242, 243, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 214, 0, 118, 215, 0,
	216, 0, 119, 120, 217, 218, 0, 0, 123, 0,
	121, 0, 0, 122, 219, 220, 221, 0, 222, 0,
	0, 124, 0, 125, 126, 0, 0, 223, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	224, 140, 225, 141, 142, 0, 0, 0, 0, 0,
	143, 226, 0, 144, 0, 227, 145, 146, 0, 0,
	228, 148, 229, 149, 0, 150, 0, 152, 230, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 231, 0, 0, 163, 164, 165, 0, 232, 166,
	167, 0, 168, 169, 0, 170, 233, 234, 171, 0,
	172, 173, 175, 235, 174, 236, 0, 176, 0, 177,
	178, 0, 237, 238, 239, 0, 0, 179, 240, 241,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 242, 243, 812, 190, 831,
	832, 833, 0, 191, 192, 193, 194, 0, 0, 834,
	0, 0, 0, 0, 0, 0, 814, 0, 841, 0,
	0, 0, 0, 812, 0, 831, 832, 833, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 813, 0, 0,
	0, 0, 814, 828, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 831, 832,
	833, 0, 0, 813, 0, 0, 0, 0, 834, 828,
	0, 0, 275, 0, 0, 814, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 838, 842,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 277, 840, 0, 0, 0, 282, 283, 0, 289,
	0, 0, 836, 0, 838, 842, 0, 0, 829, 0,
	0, 276, 278, 0, 0, 0, 0, 0, 840, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	835, 0, 0, 0, 829, 0, 0, 838, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 840, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 836, 280, 281, 0, 830, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 839, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 830, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 837,
	0, 0, 825, 826, 827, 839, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 837, 0, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 0, 285, 0, 0, 286, 1740, 0, 0, 0,
	287, 0, 0, 1306, 0, 1323, 1324, 1325, 837, 0,
	0, 825, 826, 827, 0, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 812, 0, 831, 832, 833, 1739,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 814, 812, 841, 831, 832, 833, 1320,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 814, 813, 841, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 813, 831, 832, 833, 0, 0,
	828, 0, 0, 0, 0, 834, 1311, 0, 0, 0,
	0, 0, 814, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 1326, 828,
	0, 0, 0, 0, 0, 838, 842, 819, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 0, 838, 842, 0, 0, 836,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 840,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 836,
	0, 0, 0, 0, 0, 829, 0, 835, 0, 0,
	0, 0, 0, 0, 838, 842, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 835, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 830, 0, 829, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 835, 0, 0, 0,
	0, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	1319, 0, 1316, 1313, 1314, 1315, 1307, 1308, 1309, 1310,
	1312, 830, 0, 0, 0, 0, 837, 0, 0, 825,
	826, 827, 839, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 0, 0, 0, 0, 837, 1719, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 812, 0, 831, 832, 833, 1696, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	0, 814, 0, 841, 0, 837, 0, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 812, 813, 831, 832, 833, 1691, 0, 828, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	814, 812, 841, 831, 832, 833, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	814, 813, 841, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 838, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 836, 0, 0,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 842, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 840, 0, 0, 0,
	0, 0, 838, 842, 0, 0, 836, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	830, 0, 829, 0, 835, 0, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 837, 0, 0, 825, 826, 827,
	839, 824, 821, 822, 823, 815, 816, 817, 818, 820,
	0, 0, 0, 0, 0, 1687, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 825, 826, 827, 0,
	824, 821, 822, 823, 815, 816, 817, 818, 820, 0,
	0, 0, 0, 837, 1624, 0, 825, 826, 827, 0,
	824, 821, 822, 823, 815, 816, 817, 818, 820, 812,
	0, 831, 832, 833, 1623, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 0, 814, 812,
	841, 831, 832, 833, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 0, 814, 813,
	841, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 813,
	831, 832, 833, 0, 0, 828, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 0, 0, 814, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 0,
	838, 842, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 840, 0, 0, 0, 0, 0,
	838, 842, 0, 0, 836, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 840, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 836, 0, 0, 0, 0, 0,
	829, 0, 835, 0, 0, 0, 0, 0, 0, 838,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 830, 0, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 837, 0, 0, 825, 826, 827, 839, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 0, 0, 0,
	0, 837, 1530, 0, 825, 826, 827, 0, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 812, 0, 831,
	832, 833, 1465, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 0, 814, 0, 841, 0,
	837, 0, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 812, 813, 831, 832,
	833, 1449, 0, 828, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 814, 812, 841, 831, 832,
	833, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 814, 813, 841, 0, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 838, 842,
	0, 0, 0, 0, 0, 0, 0, 1306, 0, 1323,
	1324, 1325, 840, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 836, 0, 0, 0, 0, 0, 829, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 842, 819,
	1810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 840, 0, 1320, 0, 0, 0, 838, 842, 0,
	0, 836, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 830, 0, 829, 0, 835,
	0, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1809, 0, 830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 1321, 837,
	0, 0, 825, 826, 827, 839, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 825, 826, 827, 0, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 0, 1322, 0, 1513, 837, 0,
	0, 825, 826, 827, 0, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 812, 0, 831, 832, 833, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 814, 0, 841, 0, 0, 0, 0,
	812, 0, 831, 832, 833, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 813, 0, 0, 1023, 0, 814,
	828, 841, 1317, 1318, 1319, 0, 1316, 1313, 1314, 1315,
	1307, 1308, 1309, 1310, 1312, 0, 0, 0, 0, 0,
	813, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 1337,
	0, 0, 1336, 1024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 842, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 838, 842, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 835, 0, 0,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 844,
	0, 0, 830, 0, 0, 812, 0, 831, 832, 833,
	0, 0, 0, 839, 0, 0, 0, 834, 0, 0,
	0, 843, 0, 0, 814, 0, 841, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 812, 813, 831, 832, 833, 0,
	0, 828, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 814, 0, 841, 837, 0, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 0, 0, 813, 0, 0, 0, 0, 0,
	828, 0, 837, 0, 0, 825, 826, 827, 819, 824,
	821, 822, 823, 815, 816, 817, 818, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 842, 0, 0,
	0, 0, 0, 0, 812, 0, 831, 832, 833, 0,
	840, 0, 0, 0, 0, 0, 834, 819, 0, 0,
	836, 0, 0, 814, 0, 841, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 842, 0, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 835, 840,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 0, 0, 835, 313, 0,
	0, 0, 0, 0, 839, 0, 0, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 842, 0, 0, 0,
	0, 0, 830, 812, 0, 831, 832, 833, 0, 840,
	0, 0, 0, 839, 0, 834, 0, 0, 0, 836,
	0, 0, 814, 0, 841, 829, 0, 837, 0, 0,
	825, 826, 827, 0, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 813, 0, 0, 0, 835, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 830, 812, 0, 831, 832, 833, 0, 0,
	0, 0, 0, 839, 0, 834, 819, 0, 0, 1338,
	0, 1343, 814, 0, 841, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 838, 842, 0, 0, 0, 0,
	0, 0, 812, 813, 831, 832, 833, 0, 840, 828,
	0, 0, 0, 0, 834, 0, 0, 0, 836, 0,
	0, 814, 0, 841, 829, 0, 837, 0, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 813, 0, 0, 0, 835, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 842, 0, 0, 0, 0,
	0, 830, 0, 0, 0, 0, 0, 0, 840, 0,
	0, 0, 839, 0, 0, 819, 0, 0, 836, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 829, 0, 837, 0, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 830, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 0, 839, 0, 0, 0, 1304, 812, 0, 831,
	832, 833, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 1298, 0, 0, 814, 0, 841, 0,
	830, 0, 0, 812, 0, 831, 832, 833, 0, 0,
	0, 839, 0, 0, 0, 834, 0, 813, 0, 0,
	0, 0, 814, 828, 841, 837, 0, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 0, 0, 813, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 825, 826, 827,
	819, 824, 821, 822, 823, 815, 816, 817, 818, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 842,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 24, 838, 842, 0, 0, 829, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	835, 0, 0, 0, 829, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 1306, 0, 1323,
	1324, 1325, 0, 0, 33, 830, 0, 0, 0, 1593,
	0, 29, 0, 0, 45, 0, 839, 0, 32, 30,
	812, 0, 831, 832, 833, 0, 0, 0, 0, 0,
	0, 830, 0, 0, 0, 34, 0, 0, 0, 814,
	0, 841, 839, 1320, 0, 0, 1306, 0, 1323, 1324,
	1325, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	813, 0, 0, 0, 0, 0, 828, 0, 0, 837,
	0, 0, 825, 826, 827, 0, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 0, 0, 0, 0,
	1311, 0, 1320, 0, 0, 837, 0, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 0, 31, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 47, 0, 0, 35, 0, 46, 0,
	0, 838, 842, 36, 0, 0, 56, 0, 1321, 1311,
	0, 39, 41, 0, 0, 840, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 836, 0, 58, 0, 0,
	0, 829, 0, 1306, 0, 1323, 1324, 1325, 0, 0,
	48, 1326, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 1321, 0, 0,
	0, 54, 0, 0, 0, 1322, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 53, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 1317, 1318, 1319, 0, 1316, 1313, 1314, 1315,
	1307, 1308, 1309, 1310, 1312, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 825, 826, 827, 1326, 824,
	821, 822, 823, 815, 816, 817, 818, 820, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 1317, 1318, 1319, 0, 1316, 1313, 1314, 1315, 1307,
	1308, 1309, 1310, 1312, 611, 605, 628, 599, 619, 618,
	0, 0, 601, 600, 0, 0, 0, 630, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 624, 0, 616,
	615, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 608, 609, 0, 627, 0, 0, 1317, 1318,
	1319, 0, 1316, 1313, 1314, 1315, 1307, 1308, 1309, 1310,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 603, 0, 0, 0, 0,
	0, 0, 0, 610, 604, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	625, 626, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631,
}
var sqlPact = [...]int{

	22274, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 822, -1000, -1000, -1000, 709, 772,
	208, 15169, 15169, 14911, 1458, 1458, 16459, -1000, -1000, 19297,
	-1000, 19888, 502, 503, 502, 502, 501, 16459, 584, 706,
	162, -1000, 749, 23, 19039, 15169, 1311, 42, 13879, 354,
	22274, 14653, 15169, 18781, 1155, 1070, 1064, 13879, 18523, 18265,
	18007, -1000, 9381, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 571, 361, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 359, -1000, 14395, -1000, 900, -1000,
	41, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 894,
	-1000, 15169, -1000, -1000, 17749, 17491, 358, 859, -1000, -1000,
	562, 412, 1330, -1000, 56, -1000, -1000, 1154, -1000, 889,
	1152, 1151, 1149, 1147, 1144, 1142, 411, 872, -1000, 557,
	859, -1000, 859, -1000, -1000, -1000, 545, 16459, -1000, 13879,
	-1000, 17233, 1082, 16975, -1000, 749, -1000, -1000, -1000, 994,
	1309, 1309, 1309, 1321, 180, 178, 162, 28, 15169, -1000,
	357, 28, 6420, 6420, -1000, -1000, 354, -1000, 231, 12062,
	50, -1000, 6960, -1000, 815, 1217, 754, 752, 1216, -53,
	13879, 15169, 15169, 652, 16717, -1000, 1214, 132, 1213, -1000,
	125, 1198, -1000, 18, -1000, -1000, -1000, -1000, -1000, -1000,
	354, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14137, 1375, 22642, -1000, 8305,
	-1000, -1000, 12331, 788, 12331, -1000, -1000, 1374, -1000, 8305,
	-1000, 40, 37, 1039, 1041, 9920, 9651, 1251, 767, -1000,
	-1000, -1000, 55, 3988, 15169, 1169, 12331, 15169, 15169, 15169,
	15169, 15169, -1000, 15169, -1000, 1032, -1000, 15169, -1000, 35,
	30, -1000, 16459, -1000, 134, -1000, 345, 1003, 16201, 1223,
	1001, -1000, 994, -1000, 873, 1022, 7498, 8305, 162, -1000,
	-1000, 162, 162, 8305, -1000, -1000, 15169, 28, 1372, 15169,
	184, -1000, 21615, -1000, -1000, 8305, 8305, 8305, 8305, 8305,
	837, -1000, -1000, -1000, 4798, -1000, -1000, 50, 344, 368,
	-1000, -1000, 343, 50, -1000, -1000, -1000, -1000, 342, 1479,
	467, -1000, -1000, -1000, 8305, 406, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1163, 341, 340, -1000, -1000,
	-1000, -1000, 338, 336, 334, 331, 329, 328, 327, 326,
	323, 322, 318, 312, 310, 305, 797, -1000, 464, -1000,
	-1000, 464, 464, -1000, 289, 289, 292, -1000, -1000, -1000,
	289, -1000, -1000, -1000, 403, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 302, 184, -1000, -1000, -1000, 15169, 50, -1000,
	-1000, -1000, 8305, 3718, 14, -1000, 22173, -1000, 1, 836,
	-1000, 13363, 1298, 1278, 1265, 13879, 542, 541, 15169, 15169,
	431, 461, 1368, 461, 11524, -1000, 15169, 15169, -1000, 15169,
	-1000, -1000, 15169, -1000, 15169, 15169, 146, 12847, 810, 1195,
	23, -2, -1000, 1381, -1000, -1000, -1000, -1000, 124, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 292, 797, 289, 289, 289, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 403, -1000, -1000, 464, 464,
	464, -1000, -1000, -7, 22173, 538, 16, 12589, 15169, -1000,
	52, -1000, -1000, 1141, 500, -8, 792, 1058, 915, -1000,
	-1000, -1000, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1450, -1000, -1000, -1000, -1000, 1470,
	22, -1000, -1000, -1000, -1000, -1000, 1478, -1000, -1000, -1000,
	3988, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15169, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 792, 1058,
	-1000, -1000, 13879, 13105, 1193, 886, 999, -1000, -1000, 390,
	1192, -1000, -1000, -1000, -1000, 22173, -1000, 22173, 713, 1075,
	-1000, 1075, 20, -1000, 21440, -1000, 280, -9, -1000, 431,
	6420, 11255, 22642, 15169, 551, 8305, 8305, 8305, 8305, 8305,
	8305, 8305, 8305, 8305, 8305, 8305, 8305, 8305, 8305, 8305,
	8305, 8305, 8305, 8305, 8305, 8305, 8305, 924, 8305, 537,
	1025, 877, 255, 3988, -1000, 1414, 1414, 1414, 22360, 22360,
	233, 27, 21077, 17, 50, -1000, -1000, 6151, 5880, 50,
	4256, -1000, 697, 1467, 462, 22173, 1175, 1109, 271, 177,
	160, 8305, 8305, 869, 8305, 8574, 8305, 8305, 5069, 8305,
	8305, 8305, 8305, 8305, 8305, -1000, 268, -1000, -1000, -1000,
	-1000, 1466, -1000, -1000, 1465, -1000, 550, 549, 1463, 431,
	159, -1000, 2767, -1000, -1000, 6960, -1000, 810, 15169, 15169,
	15169, -1000, -1000, 990, 15943, -1000, 22642, 15169, -1000, 261,
	259, 1050, 1048, 15169, 15169, 15685, 15427, 15169, 716, 15169,
	15169, 720, -1000, 691, 8305, 711, -1000, 10717, 470, 15169,
	743, 173, -1000, -1000, -1000, 389, 15169, -1000, -1000, -1000,
	132, -1000, 125, -1000, -1000, 13879, -1000, -1000, -1000, -1000,
	-1000, -1000, 22642, 372, 370, -1000, 1457, 536, -1000, 528,
	527, 526, -1000, 258, -1000, 8305, 15169, 12589, 16, 10,
	-1000, -1000, 15169, 1058, -1000, -1000, -1000, -1000, 694, -1000,
	774, -1000, 10189, -1000, -1000, -1000, 697, -1000, -24, -1000,
	-1000, -1000, -1000, 158, 5, -1000, -1000, -1000, -1000, -1000,
	15169, 324, 15169, 15169, 15169, 1190, 1477, 15169, -1000, -1000,
	-1000, 8305, -1000, -1000, -1000, 23, 15169, -1000, 1105, -1000,
	3, 1707, -86, 13621, -1000, 10447, -1000, -1000, 409, 1409,
	1409, 1324, 1324, 1324, 1324, 417, 417, 1034, 572, 3055,
	3055, 3055, 514, 1575, 1575, 3055, 3055, 3055, 22360, 226,
	176, 8305, 8305, 523, 863, 255, 176, 8305, -1000, 708,
	-1000, -1000, -1000, 1132, 252, 8574, 8574, -1000, -1000, -1000,
	4798, -1000, -1000, 247, 8305, -1000, 8305, -16, -67, -1000,
	-1000, -23, -1000, -1000, 9, 8305, 8305, 8305, 151, -1000,
	149, 637, -1000, 8305, 823, 245, 244, 8305, -1000, -1000,
	22147, 19807, 144, 1131, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 143, 21972, 142, 2564, -1000, 8574, 8574, 8574, 4798,
	243, 138, 21414, -123, 21933, 7229, 7229, 7229, 122, 21853,
	8305, -123, 3077, 2959, 2863, -25, -29, -33, 1454, -35,
	108, 408, 407, 105, 1105, -1000, -1000, 8305, -1000, -1000,
	-1000, 522, 511, 1189, -1000, 974, -1000, 830, 8305, 15169,
	241, 240, 756, -1000, 1188, 847, 1187, 847, -1000, 1,
	784, -1000, -1000, 510, -1000, 6420, 22173, -1000, 740, 1274,
	-42, -1000, -1000, -1000, 6420, 431, 11524, 6960, -43, -1000,
	-1000, 810, -1000, 469, 1448, 100, 934, 850, 737, 663,
	1425, 22173, -24, -1000, -24, -1000, -1000, -1000, -1000, -1000,
	-1000, 15169, 1086, 13105, 239, 15169, 237, 235, 234, 15169,
	-1000, 1223, -1000, 99, -1000, 1097, 1320, 11255, 1066, 1059,
	11255, 867, 840, 840, 840, -1000, 13621, 3435, -1000, -1000,
	15169, 230, 10987, 98, 1707, 8305, 176, 176, 8305, 8574,
	8574, -1000, 176, -1000, -1000, -1000, -1000, 1129, 225, 8305,
	22642, 22503, 22386, -44, 5609, -37, 20838, -1000, -1000, 368,
	-1000, 97, 6691, -1000, 21654, 13, 13, -1000, 1475, 1221,
	-1000, 8305, 21734, -1000, 11793, 459, 854, 20799, 22642, 22642,
	-1000, 8305, -1000, 1124, 8305, -1000, 22642, 8574, 8574, 8574,
	8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574,
	8574, 8574, 8574, 8574, 8574, 8574, 1033, 8574, 1408, 1408,
	1408, -51, 5338, -1000, 1161, 1124, 8305, 8305, 22642, 96,
	95, 94, -1000, 8305, -123, 8305, 8305, 8305, -1000, -1000,
	-1000, 93, -1000, 1419, -1000, -1000, -1000, -1000, 1097, 21116,
	15169, 15169, 15169, 1186, 1016, -1000, 20779, -50, 15169, 15169,
	-1000, 1065, 1074, 491, 15169, -1000, 15169, -1000, 15169, 15169,
	15169, 15169, -66, 6420, 229, 23, 15169, -66, 691, -1000,
	-1000, 387, -1000, 363, 126, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 88, -1000, -1000, 1089, -1000, 9112, 212,
	15169, 13105, 9112, 885, -1000, -1000, 421, 8305, 8305, 1707,
	11255, 11255, 1246, 1053, 11255, -1000, -1000, -1000, -1000, 395,
	-1000, 1061, 207, 15169, 13621, 1335, 176, 22337, 3018, 8305,
	22642, 3161, -59, 8305, 8305, -1000, -65, -1000, 8305, -1000,
	-1000, 1474, 8305, 87, 85, 76, -1000, -1000, 22173, 8305,
	-1000, -1000, 19555, 8305, 75, -1000, 74, 70, 22173, 1161,
	22173, -1000, 649, 649, 1408, 1408, 1408, 1408, 1057, 1057,
	888, 818, 539, 539, 539, 581, 524, 524, 539, 539,
	539, 1123, 1013, 205, 20123, 8305, -71, -1000, -1000, -1000,
	22173, 22173, 69, -1000, -1000, -1000, -123, 2309, 20501, 20481,
	-1000, 67, 421, -1000, -1000, -1000, -1000, 15169, -1000, 15169,
	-1000, 15169, 15169, 961, -1000, -1000, 1031, 204, 8574, 15169,
	-1000, 773, -73, -75, 951, -1000, 911, 8305, -1000, 22642,
	847, 847, -1000, 508, 506, -1000, -66, 1228, 15169, 1264,
	-1000, -1000, -1000, 203, -1000, -1000, -1000, 809, -77, -1000,
	224, 1296, 8305, -1000, -1000, 202, 9112, -81, -1000, -1000,
	66, -83, 15169, -1000, 15169, 22173, -123, -1000, 1246, -1000,
	198, 8305, 11255, -1000, -1000, 880, -136, -1000, 386, -1000,
	15169, -87, -1000, 8305, 8305, 3161, -92, -1000, 176, 176,
	-1000, 20442, -1000, 21654, -1000, -1000, -1000, 22173, 803, -1000,
	20203, -1000, -1000, -1000, -1000, 8574, 1120, 197, 22642, 20164,
	-1000, -1000, 8305, -1000, -1000, -1000, -1000, -1000, 1653, -1000,
	-1000, -1000, -1000, 8305, 20123, 196, 1086, 195, -1000, -1000,
	-1000, 769, -1000, -1000, 22173, 1299, -1000, -1000, 15169, 15169,
	577, -98, 15169, -1000, -1000, 4527, 15169, 773, 9112, 1289,
	50, 15169, 1289, 20144, 4256, -100, -1000, 15169, 1086, 773,
	192, -99, -1000, 1341, -1000, 15169, 22173, -1000, 599, 1061,
	-1000, 3988, -102, -1000, 176, 176, -1000, -1000, 64, 854,
	1315, -1000, 21197, 8574, 22642, -104, -1000, 19866, -1000, 19833,
	1010, 15169, -1000, 15169, 15169, 473, 15169, -1000, -1000, 630,
	-1000, 431, -1000, 190, 1086, -1000, -1000, -1000, -1000, 1296,
	9, 773, -1000, -1000, 1086, 9112, 15169, 187, -108, 517,
	-1000, -1000, -1000, -1000, 715, 8305, 21197, -112, -1000, -1000,
	-1000, 864, 777, 62, -114, 174, -1000, 8305, -1000, 11524,
	-1000, 15169, -1000, 1289, 61, 1086, -1000, -116, -1000, -1000,
	-1000, 1473, 58, 8036, 8036, -123, -1000, -1000, 883, 866,
	654, -1000, -1000, -1000, -1000, -1000, 1010, 15169, 22173, -94,
	-118, -1000, -1000, -1000, 773, -1000, -1000, -1000, -1000, 8843,
	926, 671, 21136, -1000, -1000, 1232, -1000, 478, 1000, 1000,
	864, -124, -1000, 847, 1086, 1391, -1000, -1000, -1000, -1000,
	-1000, -1000, 1399, -1000, -1000, 1054, -1000, -1000, -1000, -1000,
	-1000, 7767, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1735, 1730, 1338, 125, 124, 1723, 1722, 1717, 106,
	123, 122, 126, 1716, 84, 1712, 1709, 1693, 104, 1691,
	1684, 1683, 57, 1681, 1675, 1665, 1660, 1659, 101, 54,
	166, 1835, 157, 1654, 1651, 1646, 14, 112, 67, 1645,
	1, 65, 107, 114, 1086, 66, 1643, 1642, 151, 38,
	18, 23, 100, 149, 139, 133, 1640, 1639, 1637, 42,
	1636, 4, 1635, 1633, 1631, 50, 16, 1630, 17, 1629,
	22, 1628, 1627, 111, 1626, 105, 120, 26, 128, 148,
	1624, 49, 12, 76, 1623, 41, 1622, 43, 79, 143,
	1621, 53, 152, 60, 31, 51, 1619, 1618, 1617, 1616,
	78, 1614, 95, 90, 1612, 1611, 77, 1603, 131, 144,
	1599, 1590, 141, 1589, 1588, 1587, 706, 1582, 1581, 425,
	1578, 9, 83, 52, 3, 116, 115, 24, 1577, 20,
	1576, 1366, 848, 816, 1574, 72, 61, 81, 45, 46,
	19, 1572, 1568, 113, 1566, 1563, 1562, 1561, 1560, 80,
	1559, 74, 142, 30, 47, 94, 21, 35, 130, 92,
	102, 150, 118, 1558, 1556, 119, 1554, 58, 1550, 1547,
	1072, 121, 1546, 1544, 1541, 950, 607, 308, 25, 1539,
	1538, 293, 168, 1537, 1535, 134, 1534, 1532, 145, 1529,
	147, 39, 1528, 117, 1527, 96, 1526, 0, 89, 36,
	1525, 136, 75, 1521, 1517, 1516, 1514, 29, 6, 8,
	7, 10, 2, 28, 27, 1513, 1511, 140, 98, 1510,
	158, 1508, 1506, 44, 1505, 1503, 15, 1501, 13, 1499,
	11, 5, 1490, 138, 1489, 110, 1488, 1378, 1487, 146,
	1486, 1485, 1407, 86,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 78, 78, 77, 77, 80, 80, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 166,
	166, 165, 13, 141, 141, 14, 14, 14, 14, 15,
	101, 101, 16, 16, 16, 16, 17, 21, 233, 233,
	233, 237, 237, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 24, 24, 24, 24, 24, 120,
	116, 116, 118, 118, 118, 118, 43, 115, 115, 115,
	115, 117, 117, 117, 117, 190, 188, 188, 195, 195,
	195, 56, 56, 56, 56, 56, 57, 57, 57, 187,
	187, 187, 187, 196, 196, 196, 196, 196, 196, 58,
	58, 58, 194, 194, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	189, 189, 234, 234, 236, 236, 8, 8, 59, 59,
	60, 60, 123, 123, 123, 123, 61, 61, 122, 205,
	205, 206, 206, 206, 206, 207, 207, 207, 207, 207,
	207, 207, 203, 203, 204, 201, 201, 202, 202, 202,
	202, 240, 240, 121, 121, 64, 64, 210, 210, 210,
	210, 208, 208, 208, 208, 208, 211, 209, 212, 212,
	212, 212, 212, 152, 152, 152, 27, 7, 7, 105,
	105, 68, 68, 156, 156, 156, 69, 69, 157, 50,
	50, 36, 36, 36, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 106, 106, 107, 107, 19, 23, 26,
	26, 26, 26, 26, 242, 242, 47, 47, 47, 47,
	48, 48, 119, 119, 119, 119, 119, 42, 6, 6,
	41, 41, 18, 18, 18, 18, 18, 53, 53, 112,
	112, 112, 114, 114, 113, 113, 113, 91, 91, 28,
	82, 82, 83, 83, 163, 84, 84, 22, 22, 31,
	31, 29, 29, 29, 29, 29, 29, 30, 30, 32,
	32, 32, 32, 32, 32, 32, 218, 218, 218, 220,
	220, 217, 219, 219, 241, 241, 92, 92, 92, 63,
	62, 62, 66, 66, 65, 67, 67, 155, 89, 89,
	89, 89, 108, 109, 109, 110, 110, 111, 111, 88,
	88, 138, 138, 33, 33, 73, 73, 74, 74, 129,
	129, 130, 130, 128, 128, 128, 158, 158, 158, 158,
	159, 159, 159, 159, 159, 159, 153, 153, 153, 153,
	154, 154, 164, 164, 95, 95, 95, 95, 93, 93,
	94, 94, 160, 160, 160, 160, 90, 90, 161, 161,
	161, 124, 124, 167, 167, 167, 72, 72, 72, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 169, 169, 169, 169, 171, 171, 171,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 172, 172, 179, 179, 180, 180, 181,
	182, 173, 173, 174, 174, 175, 176, 183, 183, 183,
	183, 185, 185, 177, 177, 177, 177, 177, 178, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 103, 103, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	213, 213, 213, 213, 213, 213, 213, 215, 215, 216,
	216, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 221, 221, 222,
	222, 223, 223, 224, 224, 226, 227, 227, 227, 228,
	232, 232, 225, 225, 229, 229, 229, 230, 230, 231,
	231, 231, 231, 231, 143, 143, 143, 144, 144, 145,
	79, 79, 140, 140, 139, 139, 139, 142, 142, 96,
	184, 184, 184, 184, 184, 184, 184, 97, 97, 104,
	98, 98, 99, 99, 99, 99, 99, 99, 135, 136,
	100, 100, 100, 137, 137, 146, 150, 150, 149, 148,
	148, 147, 147, 127, 127, 127, 127, 126, 125, 85,
	85, 243, 243, 151, 151, 86, 86, 87, 81, 81,
	162, 162, 162, 162, 75, 75, 55, 55, 76, 76,
	51, 51, 54, 52, 52, 52, 52, 70, 70, 71,
	71, 49, 49, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 186, 186, 186, 44, 44, 44,
	45, 45, 46, 46, 192, 192, 192, 193, 193, 193,
	193, 191, 191, 191, 191, 191, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 7, 10, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 3, 2,
	0, 3, 1, 2, 2, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 1, 3, 1, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 4, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 2, 2, 1, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -219, 87,
	95, 188, 94, 80, 111, 202, 209, -29, -31, 217,
	-120, 218, 30, 226, 54, 90, 204, 199, 246, 61,
	-218, -32, -30, 292, 267, 273, 212, -33, 233, 260,
	295, 233, 73, 124, 82, 128, 254, 253, 73, 124,
	233, -12, 292, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -197, -199, 16, 17, 19, 29,
	30, 35, 39, 42, 53, 54, 55, 57, 59, 60,
	63, 64, 71, 72, 73, 74, 76, 80, 82, 86,
	87, 89, 94, 95, 100, 101, 104, 106, 112, 117,
	118, 125, 128, 123, 136, 138, 139, 144, 147, 150,
	152, 153, 154, 155, 156, 158, 159, 161, 163, 160,
	166, 168, 169, 175, 178, 181, 182, 183, 186, 188,
	190, 191, 192, 194, 195, 199, 197, 198, 200, 202,
	204, 205, 207, 209, 210, 211, 214, 215, 217, 218,
	220, 223, 225, 226, 229, 227, 232, 234, 235, 242,
	246, 247, 248, 249, 252, 253, 254, 257, 258, 259,
	263, 268, 269, 270, 271, 24, 31, 32, 33, 34,
	36, 37, 40, 41, 45, 46, 47, 49, 75, 77,
	78, 93, 96, 102, 110, 113, 115, 119, 120, 129,
	130, 131, 133, 142, 165, 167, 176, 180, 185, 187,
	193, 206, 213, 221, 222, 228, 230, 237, 238, 239,
	243, 244, 260, 261, -44, -44, 188, 18, -237, 18,
	-238, -239, 61, 87, 111, 212, 128, 82, 253, -237,
	-48, 209, -44, -116, 147, 215, 206, 242, -117, -115,
	-190, 237, 156, -77, -44, 4, 73, 53, 74, 112,
	124, 125, 58, 59, 139, 234, 237, 242, 18, 61,
	-242, 242, 242, -242, -242, -47, 242, 240, -48, -241,
	233, 233, -105, 73, 251, -30, -32, -31, -65, -66,
	250, 132, 92, 174, -29, -31, -218, -220, 194, -217,
	-44, -220, -62, -63, 18, 84, 296, -160, -51, 172,
	-44, -87, 292, -3, -160, 119, -44, -54, 119, -51,
	108, 134, 134, -161, -160, -44, 119, -55, 119, -54,
	-78, 119, -77, -166, -165, -193, 4, -197, -199, -198,
	260, 51, 62, 109, 127, 121, 135, 137, 143, 145,
	157, 177, 179, 203, 219, 233, -141, 292, -101, 292,
	-44, 18, 171, 296, 171, -44, -116, 47, -116, 292,
	-118, -42, -43, 136, 190, 240, 277, 108, 271, -58,
	5, 79, -80, 294, 108, -234, 171, 108, 108, 108,
	108, 108, -189, 108, 271, 136, 190, 233, -119, -42,
	-43, -119, 240, -48, -90, -160, -77, 119, 124, -44,
	119, -65, -66, -89, -108, -109, 146, 170, -92, 18,
	84, -92, -92, 39, 293, 293, 296, -220, -71, 292,
	-81, -162, -131, 285, -133, 283, 284, 289, 162, 272,
	-143, -51, -134, 9, 292, -146, -215, -31, 93, 25,
	-144, -145, 206, -44, 7, 8, 5, 6, -49, -169,
	-178, 245, 97, 164, 43, -213, -214, 4, -197, -192,
	-170, -180, -174, -177, 133, 51, 66, 69, 67, 70,
	216, 255, 44, 24, 96, 180, 185, 230, 243, 244,
	119, 165, 120, 49, 113, 142, 86, 32, 34, 36,
	37, 45, 46, 75, 77, 78, 102, 129, 130, 131,
	167, 193, 221, 228, 238, 239, 261, -198, -181, -182,
	-175, -176, -183, -81, -87, 285, -51, 292, -85, -127,
	-126, -125, 290, 294, -86, -151, -131, 79, -38, 197,
	-37, 17, 19, 87, 258, 93, 197, 197, 93, 297,
	-161, -53, -51, -53, 217, -44, 26, 93, -40, 296,
	42, 200, 93, -40, 296, 93, 293, 296, -160, 119,
	26, -140, -167, -168, -170, -179, -173, -177, -178, 35,
	41, 40, 235, 213, 222, 33, 110, 129, 130, 131,
	221, 32, 193, 102, 86, 78, 77, 167, 37, 36,
	-181, -182, -175, -176, 75, 238, 239, 133, 34, 46,
	45, 261, 228, -79, -131, -233, -76, 233, 73, -52,
	-44, 285, -239, -233, 26, -79, 296, 296, 144, -57,
	150, 161, 117, -188, 79, -195, -187, -152, 9, 245,
	97, 171, -194, 8, 284, -186, -193, 5, 7, 283,
	-188, 79, 64, -196, 5, 4, -178, -152, 79, 147,
	294, -191, 4, -197, -199, -198, -200, 18, 20, 21,
	22, 23, 25, 26, 27, 28, 38, 43, 44, 48,
	50, 52, 58, 61, 65, 66, 67, 68, 69, 70,
	79, 81, 83, 84, 85, 88, 90, 92, 97, 98,
	99, 105, 107, 108, 111, 114, 116, 122, 124, 126,
	132, 134, 140, 141, 146, 148, 149, 162, 164, 170,
	171, 172, 173, 174, 184, 189, 196, 201, 212, 216,
	224, 231, 233, 236, 240, 241, 245, 250, 251, 255,
	256, 262, 264, 265, 266, 267, -190, -236, 105, -233,
	-190, -190, -190, -190, -190, -190, 144, -190, 296, 296,
	-48, -40, 296, 292, 162, -45, 119, -44, -41, 89,
	162, -89, -109, -108, -110, -131, 18, -131, -133, -30,
	-30, -30, -67, -155, -131, -217, 26, -70, -44, -73,
	296, 108, 10, 50, 29, 283, 284, 285, 286, 103,
	287, 280, 281, 282, 279, 275, 276, 277, 56, 151,
	208, 12, 13, 14, 22, 173, 145, 272, 121, 219,
	135, 31, 122, 26, 4, -131, -131, -131, -131, -131,
	179, -31, -131, -79, -85, -31, -139, 290, 292, -85,
	292, 5, 5, 292, -147, -131, -221, 268, 105, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 187, -185, 263, -185, -185,
	-171, 292, -171, -172, 292, -171, 269, 273, 292, -73,
	-51, -127, -131, -191, 285, 296, 293, 296, 240, -106,
	58, 52, -122, 119, 52, -201, -44, 58, -202, 48,
	251, 189, 107, -106, 58, -106, 58, 58, -160, 240,
	240, -54, -44, -124, 265, -112, -22, 292, 79, 26,
	-112, -82, -83, -163, -84, -51, 292, -44, -44, -54,
	-55, -77, -78, -12, -165, 93, -14, -22, -18, -28,
	-9, 293, 296, -72, 25, -102, 292, 270, 154, 76,
	118, 153, -103, 211, 293, 296, 240, 296, -76, -70,
	-126, -125, 108, 242, 293, -43, -42, -56, 192, 223,
	198, 214, 296, 8, 7, 7, 5, -191, -235, -44,
	-43, -42, -160, -59, -60, -123, -122, -203, -204, -201,
	124, 251, 98, 93, 171, 162, 277, 93, -111, 206,
	207, 296, -36, 27, 83, 292, 296, 293, -124, -162,
	-74, -158, -160, -31, -159, 292, -167, -77, 237, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, 145, 121, 219, 31, 122, -131, 240, 164, 162,
	245, 97, 252, 84, 168, -243, 231, 28, -137, -31,
	292, -191, -143, 206, 292, 293, 296, -79, -142, 291,
	-139, -79, 293, 293, -79, 262, 18, 84, 285, -102,
	7, -150, -149, 264, -222, 100, 114, 292, 293, 293,
	-131, -131, -96, -184, 4, 270, 154, 76, 118, 153,
	211, -97, -131, -98, -132, -133, 283, 284, 289, 292,
	206, -99, -131, -79, -131, 38, 141, 241, -100, -131,
	108, -79, -131, -131, -131, -79, -79, -79, 292, 7,
	7, 237, 237, 7, -124, 293, 291, 300, -151, -37,
	-51, -44, -44, 162, -122, 119, -167, -44, 292, 292,
	138, 138, -44, -44, 119, -44, 119, -44, -44, -38,
	197, -44, -44, 197, -91, 201, -131, -91, -114, 171,
	-75, -51, 260, -44, 201, -73, 296, 277, -75, -40,
	-40, -160, -167, 290, 290, 7, 240, 240, 240, 240,
	292, -131, -235, -52, -235, -42, 249, 55, 192, -195,
	-102, 296, 293, 296, -45, 124, -45, -77, -51, 93,
	5, -44, -155, -14, -44, -88, 114, 296, 62, -95,
	137, 157, 109, 143, 203, 127, -128, 297, -154, -153,
	26, -44, -31, -159, -158, 271, -131, -131, 240, -243,
	231, -137, -131, 164, 245, 97, 252, 84, 168, 108,
	292, -132, -132, -79, 292, -79, -131, 291, 291, 296,
	293, -66, 296, -65, -131, -79, -79, 293, 293, -148,
	-149, 88, -131, -227, 178, 292, 292, -131, 26, 296,
	293, 108, 293, -104, 184, 293, 10, 283, 284, 285,
	286, 103, 287, 280, 281, 282, 279, 275, 276, 277,
	56, 151, 208, 12, 13, 14, 135, 122, -132, -132,
	-132, -79, 292, 293, -135, -136, 108, 105, 26, -100,
	-100, -100, 293, 108, -79, 296, 296, 296, 293, 293,
	293, 7, 293, 296, 293, 271, 271, 293, -88, -131,
	240, 240, 93, 162, -205, -202, -131, -70, 292, 292,
	-35, 87, 217, -107, 93, -40, 93, -40, 240, -106,
	58, 240, -81, 201, 57, 293, 296, -81, -124, -83,
	-151, 293, 291, 7, 7, 293, 154, 118, 153, -103,
	153, -103, -103, 7, -44, -61, 123, -123, 292, -45,
	292, 292, 292, -44, -41, 293, -138, 116, 39, -158,
	137, 137, -158, -95, 137, -93, 177, -93, -93, -154,
	-191, 298, -44, 292, 293, -131, -131, -132, -132, 108,
	292, -131, -140, 22, 22, 293, -79, 293, 296, 293,
	-139, 293, 262, -66, -66, -66, 5, 90, -131, 236,
	-228, -44, 292, 265, -65, 293, -167, -167, -131, -135,
	-131, -167, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, 84, 162, 168, -132, 296, -79, 293, -136, -135,
	-131, -131, -167, 293, 293, 293, -79, -131, -131, -131,
	293, 7, -138, 291, -44, -44, -122, 93, -206, 58,
	-207, 50, 98, 162, 164, 251, 189, 48, 79, 196,
	293, 293, -70, -70, 162, 79, 162, 79, 72, 247,
	-44, -44, -51, -44, -44, -44, -81, -113, 292, 171,
	-22, -51, -91, 277, 291, 291, 293, 122, -68, -156,
	-44, -216, 292, -213, -214, -49, 292, -69, -157, -44,
	-59, -68, 171, -223, 266, -131, -79, -158, -158, -94,
	256, 171, 137, -158, -164, 274, -130, -129, 106, 160,
	292, -70, -153, 22, 22, -131, -140, 293, -131, -131,
	293, -131, 5, -131, 293, 293, 293, -131, -232, -44,
	-131, 293, 293, 293, -136, 108, 84, 168, 292, -131,
	293, 293, 296, 293, 293, 293, -223, -122, -44, -77,
	-44, 164, 138, 292, -132, -51, -121, -240, 60, 229,
	293, 293, 164, 164, -131, -167, -40, -40, 240, 240,
	85, -70, 58, -87, -31, 292, 181, 293, 296, -50,
	-85, 50, -50, -131, 292, -68, 293, 296, 293, 293,
	-51, -224, -226, -44, -94, 292, -131, -158, 168, 296,
	299, 277, -70, 293, -131, -131, 293, 293, -66, -225,
	183, 293, -132, 108, 292, -140, 293, -131, -207, -131,
	-46, 292, -61, 292, 196, -39, 50, -44, -44, 253,
	163, 293, -44, -44, -121, -156, -36, -77, -36, 293,
	-79, 293, -157, -61, -121, 292, 296, 26, -70, 232,
	-129, -191, 293, 293, -66, 39, -132, -140, 293, 293,
	293, -210, 152, -44, -70, -51, -34, 256, -77, 217,
	-124, 292, -61, -50, -66, -121, -61, -68, -226, -228,
	293, 237, -229, 191, 207, -79, 293, -208, -211, -209,
	171, 109, 182, 220, 293, 293, -64, 292, -131, -82,
	-70, -36, 293, -61, 293, 5, 293, -230, -231, 31,
	248, 64, -131, -230, -209, 171, -211, 171, 253, 82,
	-210, -70, -124, 293, -121, -231, 186, 104, 206, 186,
	104, -212, 159, 200, 42, 217, -212, -208, 293, -40,
	-61, 22, 16, 164, 79, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 327, -2, 0,
	118, 0, 285, 0, 285, 285, 289, 0, 355, 250,
	352, -2, 363, 0, 0, 0, 361, 341, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 777, 778, 779, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 91, 92, 859, 94, 0, 101,
	102, 103, 105, 106, 107, 108, 109, 110, 111, 0,
	278, 873, 291, 114, 838, 877, 941, 889, 121, 131,
	0, 947, -2, 135, 65, 164, 165, 0, 167, 183,
	0, 0, 0, 0, 0, 181, 0, 0, 178, 0,
	296, 284, 296, 281, 282, 283, 286, 0, 277, 0,
	354, 0, 0, 0, 249, -2, 337, 338, -2, 0,
	358, 358, 358, 0, 0, 338, 0, 346, 863, 349,
	760, 347, 0, 0, 360, 359, 0, 342, 422, 0,
	750, 383, 0, 2, 0, 927, 0, 0, 927, 0,
	0, 0, 0, 0, 428, 57, 927, 48, 927, 746,
	48, 927, 63, 0, 79, 81, 787, 788, 789, 790,
	952, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 0, 0, 0, 89, 0,
	93, 95, 0, 0, 0, 290, 115, 916, 117, 0,
	120, 122, 123, 0, 0, 0, 0, 0, 0, 134,
	159, 160, 66, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 174, 0, 175, 0, 177, 0, 279, 292,
	293, 280, 0, 288, 48, 426, 0, 927, 781, 301,
	927, -2, 0, 333, 370, 371, 0, 0, 0, 356,
	357, 0, 0, 0, 329, 330, 0, 348, 0, 0,
	386, 738, 742, 743, 515, 0, 0, 0, 0, 0,
	0, 598, 599, 600, 0, 602, 603, 604, 921, 0,
	608, 609, 941, 750, 763, 764, 765, 766, 0, 0,
	0, 771, 772, 773, 722, 648, 618, -2, -2, 761,
	453, 454, 455, 456, -2, 954, 622, 624, 626, 627,
	628, 629, 0, 905, 922, 937, 938, 946, 950, 951,
	927, 934, 928, 917, 925, 933, 819, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 786, 477, 478,
	483, 484, 486, 386, 384, 423, 424, 0, 751, 729,
	723, 724, 0, 0, 0, 735, 733, 734, 25, 274,
	27, 0, 274, 274, 0, 0, 0, 0, 0, 0,
	432, 0, 307, 0, 0, 429, 0, 0, 59, 0,
	46, 47, 0, 61, 0, 0, 353, 0, 0, 927,
	353, 0, 682, 438, 439, 440, 441, 442, 512, 445,
	446, 447, 448, 449, 450, 451, 452, 460, 461, 462,
	463, 464, 465, 474, 0, 459, 459, 459, 471, 472,
	475, 476, 481, 482, 493, 494, 496, 498, 492, 492,
	492, 489, 490, 0, 680, 0, 98, 0, 814, 748,
	753, 756, 104, 0, 0, 0, 0, 0, 0, 126,
	146, 147, 148, 127, 129, 136, 138, 139, 140, 149,
	150, 151, 152, 243, 0, 245, 162, 163, 774, 0,
	128, 130, 132, 133, 153, 154, 0, 156, 157, 158,
	0, 67, 791, 792, 793, 794, 795, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 166, 168, 0, 182,
	169, 170, 171, 172, 173, 180, 176, 179, 0, 0,
	287, 246, 0, 189, 0, 0, 927, 780, 298, 0,
	0, 336, 368, 369, 372, 375, 376, 373, 515, 343,
	344, 345, 364, 365, 263, 350, 0, 0, 757, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 741, 519, 520, 521, 543, 544,
	0, -2, 680, 0, 605, 606, 607, 0, 0, -2,
	0, 768, 512, 0, 0, 721, 650, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 467, 480, 491, 488, 487,
	469, 0, 468, 466, 0, 470, 0, 0, 0, 432,
	0, 730, 0, 727, 728, 0, 737, 0, 0, 0,
	0, 273, 29, 927, 0, 39, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 752, 318, 0, 318, 309, 0, 0, 0,
	305, 386, 320, 322, 323, 0, 0, 430, 58, 747,
	48, 64, 48, 70, 80, 0, 82, 85, 86, 87,
	88, 83, 0, 433, 435, 443, 0, 499, 500, 501,
	502, 503, 504, 513, 90, 0, 0, 0, 99, 100,
	754, 755, 0, 0, 119, 124, 125, 297, 0, 143,
	0, 145, 0, 244, 776, 775, 512, 68, 184, 112,
	294, 295, 427, 0, 188, 190, 192, 193, 194, 195,
	781, 0, 781, 0, 0, 0, 0, 0, 374, 377,
	378, 0, 367, 261, 262, 353, 0, 759, 380, 739,
	385, 387, 395, 411, 398, 0, 516, 517, 0, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, -2,
	-2, -2, 535, 536, 537, -2, -2, -2, 541, 542,
	-2, 0, 0, 0, 732, 0, -2, 0, 551, 0,
	554, 556, 558, 0, 0, 0, 0, 731, 568, 713,
	0, 740, 553, 0, 0, 601, 0, 0, 0, 686,
	687, 0, -2, 610, 363, 0, 0, 0, 0, 769,
	0, 720, 716, 0, 658, 0, 0, 0, 623, 625,
	0, 0, 0, 0, 690, 691, 692, 693, 694, 695,
	696, 0, 0, 0, 0, 570, 0, 0, 0, 0,
	941, 0, 680, 706, 0, 0, 0, 0, 0, 680,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 425, 725, 0, 736, 28,
	265, 0, 0, 0, 31, 927, 200, 0, 0, 0,
	0, 0, 276, 40, 927, 48, 927, 48, 41, 26,
	274, 264, 267, 0, 56, 0, 431, 302, 303, 0,
	0, 744, 311, 308, 0, 432, 0, 0, 0, 60,
	62, 0, 683, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 96, 749, 97, 116, 141, 142, 144, 137,
	155, 0, 197, 0, 0, 781, 0, 0, 0, 0,
	300, 301, 366, 0, 758, 382, 0, 0, 0, 0,
	0, 0, 419, 419, 419, 417, 411, 0, 397, 410,
	0, 409, -2, 398, 0, 0, -2, -2, 0, 0,
	0, 569, -2, 552, 555, 557, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 681, 684, 685, 0,
	-2, 0, 0, 362, 363, 363, 363, 616, 0, 0,
	717, 0, 0, 617, 0, 0, 0, 0, 0, 0,
	632, 0, 633, 0, 0, 634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 573,
	574, 0, 0, 635, 704, 705, 0, 0, 0, 0,
	0, 0, 640, 0, 711, 0, 0, 0, 644, 645,
	646, 0, 457, 0, 473, 495, 497, 485, 382, 0,
	0, 0, 0, 0, 198, 215, 0, 0, 0, 0,
	33, 0, 0, 0, 0, 37, 0, 43, 0, 0,
	0, 0, 317, 0, 316, 0, 0, 306, 318, 321,
	324, 0, 436, 0, 0, 444, 505, 506, 507, 508,
	509, 510, 511, 0, 113, 186, 0, 191, 0, 0,
	0, 189, 0, 0, 299, 351, 652, 0, 0, 388,
	0, 0, 0, 0, 0, 414, 418, 415, 416, 413,
	393, 0, 407, 0, 400, 518, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 714, 0, 675, 0, -2,
	688, 611, 0, 0, 0, 0, 770, 715, 719, 0,
	656, 657, 661, 0, 0, 621, 0, 0, 689, 698,
	699, 571, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, -2, -2, -2, 588, 589, 590, -2, -2,
	-2, 0, 0, 0, 700, 0, 0, 678, 702, 703,
	708, 709, 0, 637, 638, 639, 710, 0, 0, 0,
	479, 0, 652, 726, 269, 271, 30, 0, 199, 0,
	202, 0, 0, 0, 206, 207, 0, 0, 0, 0,
	217, 224, 0, 0, 0, 45, 0, 0, 275, 0,
	48, 48, 266, 0, 0, 268, 304, 0, 0, 0,
	310, 745, 319, 0, 437, 434, 514, 0, 0, 251,
	260, 260, 0, 619, 620, 0, 0, 0, 256, 258,
	0, 0, 0, 339, 0, 381, 379, 401, 0, 403,
	0, 0, 0, 405, 396, 0, 0, 391, 0, 390,
	0, 0, 399, 0, 0, -2, 0, 562, -2, -2,
	674, 681, 767, 363, 612, 614, 615, 718, 663, 660,
	0, 647, 630, 631, 697, 0, 0, 0, 0, 681,
	677, 636, 0, 642, 643, 458, 340, 32, 0, 203,
	204, 205, 208, 0, 210, 783, 197, 0, 221, 222,
	219, 0, 34, 35, 44, 50, 36, 42, 0, 0,
	0, 0, 0, 325, 326, 0, 0, 224, 0, 263,
	762, 0, 263, 0, 0, 0, 214, 0, 197, 224,
	0, 651, 653, 0, 402, 0, 421, 404, 0, 0,
	394, 0, 0, 408, -2, -2, 563, 676, 0, 363,
	0, 649, -2, 0, 0, 0, 679, 0, 201, 0,
	230, 0, 218, 0, 0, 52, 0, 270, 272, 0,
	313, 432, 315, 0, 197, 252, 253, 259, 254, 260,
	363, 224, 257, 187, 197, 0, 0, 0, 0, 0,
	392, 389, 406, 613, 666, 0, -2, 0, 596, 641,
	209, 235, 0, 0, 0, 226, 38, 0, 49, 0,
	314, 0, 212, 263, 0, 197, 247, 0, 654, 655,
	420, 0, 0, 0, 0, 662, 597, 211, 231, 232,
	0, 227, 228, 229, 782, 223, 230, 0, 51, 432,
	0, 255, 611, 213, 224, 412, 659, 664, 667, -2,
	892, 811, 0, 665, 233, 0, 234, 0, 0, 0,
	235, 0, 312, 48, 197, 0, 669, 670, 671, 672,
	673, 236, 0, 239, 240, 0, 237, 220, 225, 196,
	248, 0, 238, 241, 242, 668,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 281, 3, 287, 282, 3,
	292, 293, 285, 283, 296, 284, 294, 286, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 300, 295,
	275, 277, 276, 3, 297, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 290, 3, 291, 280, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 298, 279, 299, 289,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 278, 57618, 288, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:697
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:703
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:709
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:732
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:798
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:816
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:823
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:871
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:874
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:875
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1358
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1669
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = []string(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = []string(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1719
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = true
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = false
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1830
		{
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = Ascending
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = Descending
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = true
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = false
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1897
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1940
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.str = ""
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.str = ""
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2034
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2041
		{
			unimplementedWithIssue(6637)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = []string(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2338
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2342
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = true
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = false
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = false
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2374
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2572
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.str = astFullJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.str = astLeftJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.str = astRightJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.str = astInnerJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2809
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = geographyColTypeGeography
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2883
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = nil
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2928
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3000
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3027
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3111
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3115
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3148
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3544
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3545
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3586
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3606
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3631
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3680
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3684
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3685
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3717
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4226
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4262
		{
			unimplemented()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = DNull
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.str = ""
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
